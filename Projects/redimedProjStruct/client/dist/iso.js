angular.module("app.loggedIn.iso",["app.loggedIn.iso.controller","app.loggedIn.iso.main.controller","app.loggedIn.iso.service","app.loggedIn.iso.directive","app.loggedIn.iso.selectionUserName.directive","app.loggedIn.iso.selectionGroupUser.directive","app.loggedIn.iso.grantUserPermission.directive","app.loggedIn.isoSubmitStatusPendingController.controller","app.loggedIn.iso.userGroup.controller","app.loggedIn.iso.isoApproverListController.controller","app.loggedIn.iso.isoAdminController.controller","app.loggedIn.isoHierarchyApprovalController.controller"]).config(function($stateProvider){$stateProvider.state("loggedIn.iso",{url:"/iso",templateUrl:"modules/iso/views/iso.html",controller:"isoController"}).state("loggedIn.iso.main",{url:"/main",templateUrl:"modules/iso/views/isoMain.html",controller:"isoMainController"}).state("loggedIn.iso.isoSubmitStatusPending",{url:"/isoSubmitStatusPending",templateUrl:"modules/iso/views/isoSubmitStatusPending.html",controller:"isoSubmitStatusPendingController"}).state("loggedIn.iso.userGroup",{url:"/user-group",templateUrl:"modules/iso/views/isoUserGroup.html",controller:"isoUserGroupController"}).state("loggedIn.iso.isoApproverList",{url:"/approver-list",templateUrl:"modules/iso/views/isoApproverList.html",controller:"isoApproverListController"}).state("loggedIn.iso.isoAdminList",{url:"/isoAdminList",templateUrl:"modules/iso/views/isoAdminList.html",controller:"isoAdminController"}).state("loggedIn.iso.isoHierarchyApproval",{url:"/hierarchy-approval",templateUrl:"modules/iso/views/isoHierarchyApproval.html",controller:"isoHierarchyApprovalController"})}),angular.module("app.loggedIn.iso.controller",[]).controller("isoController",function($scope,isoService){$scope.permissionFunction=isoConst.permissionFunction,$scope.isoAdminFunction=isoConst.isoAdminFunction,isoTest&&($scope.permissionFunction[1]=angular.copy($scope.permissionFunction[0]),$scope.permissionFunction[2]=angular.copy($scope.permissionFunction[0]),$scope.permissionFunction[3]=angular.copy($scope.permissionFunction[0]),$scope.permissionFunction[4]=angular.copy($scope.permissionFunction[0])),$scope.checkInStatus=isoConst.checkInStatus,$scope.submitStatus=isoConst.submitStatus,$scope.isoPermission=isoConst.isoPermission,$scope.requestEditStatus=isoConst.requestEditStatus,$scope.isIsoAdminSystem=0,isoService.isoAdmin.checkIsAdminIsoSystem().then(function(data){$scope.isIsoAdminSystem="success"==data.status?1:0},function(err){$scope.isIsoAdminSystem=0}),$scope.isIsoAdminSystemMaster=0,isoService.isoAdmin.checkIsAdminIsoSystemMaster().then(function(data){$scope.isIsoAdminSystemMaster="success"==data.status?1:0},function(err){$scope.isIsoAdminSystemMaster=0}),$scope.isIsoApprover=0,isoService.isoApprover.checkIsIsoApprover().then(function(data){$scope.isIsoApprover="success"==data.status?1:0},function(err){$scope.isIsoApprover=0}),$scope.departmentList=[],isoService.core.getDepartmentList().then(function(data){$scope.departmentList="success"==data.status?data.data:[]},function(err){$scope.departmentList=[]}),$scope.documentTypeList=isoConst.documentTypeList}),angular.module("app.loggedIn.iso.main.controller",[]).controller("isoMainController",function($scope,$http,$state,$window,$cookieStore,FileUploader,toastr,isoService){$scope.testHierarchy=function(){var approvalInfo={userApprovalId:7,hierarchyHeaderId:199,hierarchyLineId:379,hierarchyNodeId:24,sourceLineId:69,status:"approved",isoNodeId:112};isoService.hierarchyApproval.approval(approvalInfo).then(function(data){exlog.alert(data)},function(err){})},$scope.userInfo=$cookieStore.get("userInfo"),$scope.nodeType=isoConst.nodeType;var msgPopup=isoMsg.popup;$scope.tempData={},$scope.tempData[-1]={},$scope.treeData={},$scope.isIsoAdminSystem=0,$scope.getTreeDir=function(){isoService.treeDir.getTreeDir($scope.userInfo.id,$scope.isIsoAdminSystem).then(function(data){if("success"==data.status){for(var i=0;i<data.data.length;i++)$scope.tempData[data.data[i].NODE_ID]=data.data[i];for(var i=data.data.length-1;i>=0;i--)console.log(">>>>>>>>>>>node_id:"+data.data[i].NODE_ID+">>>father:"+data.data[i].FATHER_NODE_ID),-1==data.data[i].FATHER_NODE_ID?$scope.tempData[data.data[i].FATHER_NODE_ID].relativePath="":$scope.tempData[data.data[i].FATHER_NODE_ID]&&($scope.tempData[data.data[i].FATHER_NODE_ID].relativePath||($scope.tempData[data.data[i].FATHER_NODE_ID].relativePath="\\"+$scope.tempData[data.data[i].FATHER_NODE_ID].NODE_NAME)),$scope.tempData[data.data[i].FATHER_NODE_ID]&&($scope.tempData[data.data[i].NODE_ID].relativePath=$scope.tempData[data.data[i].FATHER_NODE_ID].relativePath+"\\"+$scope.tempData[data.data[i].NODE_ID].NODE_NAME),$scope.tempData[data.data[i].FATHER_NODE_ID]&&$scope.tempData[data.data[i].NODE_ID].ACCESSIBLE_USER_ID!=$scope.userInfo.id&&isoNode.inheritPermission($scope.tempData[data.data[i].NODE_ID],$scope.tempData[data.data[i].FATHER_NODE_ID]);for(var i=0;i<data.data.length;i++)$scope.tempData[data.data[i].FATHER_NODE_ID]&&($scope.tempData[data.data[i].FATHER_NODE_ID].nodes||($scope.tempData[data.data[i].FATHER_NODE_ID].nodes={}),$scope.tempData[data.data[i].FATHER_NODE_ID].nodes[data.data[i].NODE_ID]=angular.copy(data.data[i]));$scope.treeData=$scope.tempData[-1].nodes}},function(err){})},isoService.isoAdmin.checkIsAdminIsoSystem().then(function(data){$scope.isIsoAdminSystem="success"==data.status?1:0},function(err){$scope.isIsoAdminSystem=0}).then(function(){$scope.getTreeDir()}),$scope.treeActions={createFolder:{name:"createFolder",url:"iso_create_folder_template.html",header:"Create Folder"},createDocument:{name:"createDocument",url:"iso_create_document_template.html",header:"Create Document"},grantNodePermission:{name:"grantNodePermission",url:"iso_grant_node_permission.html",header:"Grant Node Permission"},checkInDocument:{name:"checkInDocument",url:"iso_check_in_document.html",header:"Check In Document"},getFullVersionDocument:{name:"getFullVersionDocument",url:"iso_get_full_version_document.html",header:"Version Control",sizeLarge:!0},getFullCheckinDocument:{name:"getFullCheckinDocument",url:"iso_get_full_checkin_document.html",header:"Check In History",sizeLarge:!0},requestEditDocument:{name:"requestEditDocument",url:"iso_request_edit_document.html",header:"Request to Edit Document"},viewYourRequest:{name:"viewYourRequest",url:"iso_view_your_request.html",header:"Your Requests"},viewAllRequest:{name:"viewAllRequest",url:"iso_view_all_request.html",header:"All Requests"},forceCheckInDocument:{name:"forceCheckInDocument",url:"iso_force_check_in_document.html",header:"Force Check In Document"},createNewCheckInDocument:{name:"createNewCheckInDocument",url:"iso_create_new_check_in_document.html",header:"Create New Check In Document (skip Check Out)"},renameNode:{name:"renameNode",url:"iso_rename_node_template.html",header:"Rename"}},$scope.currentTreeAction={},$scope.selectedTreeNode={},$scope.showTreeActionsMenuPopup=function(node){angular.element("#document").fadeOut(),$scope.selectedTreeNode=node,console.log($scope.selectedTreeNode.PERMISSION),$scope.newFolder=angular.copy($scope.newFolderBlank),$scope.newDocument=angular.copy($scope.newDocumentBlank),$scope.newRequestEditDocument=angular.copy($scope.newRequestEditDocumentBlank),$("#iso-tree-actions-menu-popup").modal({show:!0,backdrop:"static"})},$scope.newFolderBlank={fatherNodeId:"",nodeType:$scope.nodeType.folder,nodeName:"",description:"",createdBy:$scope.userInfo.id,relativePath:""},$scope.newDocumentBlank={fatherNodeId:"",nodeType:$scope.nodeType.document,nodeName:"",docCode:"",description:"",createdBy:$scope.userInfo.id,relativePath:""},$scope.newRequestEditDocumentBlank={description:""},$scope.resetFlag=0,$scope.showTreeActionContentPopup=function(treeAction){switch(treeAction){case $scope.treeActions.createFolder.name:$scope.currentTreeAction=$scope.treeActions.createFolder,angular.element(".form-group").removeClass("has-success"),angular.element(".form-group").removeClass("has-error");break;case $scope.treeActions.createDocument.name:$scope.currentTreeAction=$scope.treeActions.createDocument,angular.element(".form-group").removeClass("has-success"),angular.element(".form-group").removeClass("has-error");break;case $scope.treeActions.grantNodePermission.name:$scope.currentTreeAction=$scope.treeActions.grantNodePermission,$scope.resetFlag=$scope.resetFlag+1;break;case $scope.treeActions.checkInDocument.name:$scope.currentTreeAction=$scope.treeActions.checkInDocument;break;case $scope.treeActions.getFullVersionDocument.name:$scope.currentTreeAction=$scope.treeActions.getFullVersionDocument,$scope.getFullVersionDoccument();break;case $scope.treeActions.getFullCheckinDocument.name:$scope.currentTreeAction=$scope.treeActions.getFullCheckinDocument,$scope.getFullCheckinDocument();break;case $scope.treeActions.requestEditDocument.name:$scope.currentTreeAction=$scope.treeActions.requestEditDocument;break;case $scope.treeActions.viewYourRequest.name:$scope.currentTreeAction=$scope.treeActions.viewYourRequest,$scope.selectedYourRequest.DESCRIPTION=null,$scope.getAllYourRequest($scope.selectedTreeNode.NODE_ID),console.log($scope.selectedTreeNode.NODE_ID);break;case $scope.treeActions.viewAllRequest.name:$scope.currentTreeAction=$scope.treeActions.viewAllRequest,$scope.selectedRequest.DESCRIPTION=null,$scope.getAllRequest($scope.selectedTreeNode.NODE_ID),console.log($scope.selectedTreeNode.NODE_ID);break;case $scope.treeActions.forceCheckInDocument.name:$scope.currentTreeAction=$scope.treeActions.forceCheckInDocument;break;case $scope.treeActions.createNewCheckInDocument.name:$scope.currentTreeAction=$scope.treeActions.createNewCheckInDocument;break;case $scope.treeActions.renameNode.name:$scope.currentTreeAction=$scope.treeActions.renameNode,$scope.newName={value:$scope.selectedTreeNode.NODE_NAME}}$("#iso-tree-actions-menu-popup").modal("hide"),$("#iso-tree-action-content-popup").modal({show:!0,backdrop:"static"})},$scope.newFolderBackErrorTemplate={name:""},$scope.beforeCreateFolder=function(){$scope.$broadcast("show-errors-check-validity"),$scope.actionContentForm.$valid&&null!=$scope.newFolder.nodeName&&""!=$scope.newFolder.nodeName&&($scope.newFolder.fatherNodeId=$scope.selectedTreeNode.NODE_ID,$scope.newFolder.relativePath=$scope.selectedTreeNode.relativePath+"\\"+$scope.newFolder.nodeName,$scope.newFolder.departmentId=null==$scope.selectedTreeNode.DEPARTMENT_ID?$scope.newFolder.department.DEPARTMENT_ID:$scope.selectedTreeNode.DEPARTMENT_ID,$scope.newFolderBackError=angular.copy($scope.newFolderBackErrorTemplate),isoService.treeDir.checkDupEntry($scope.newFolder.fatherNodeId,$scope.newFolder.nodeName).then(function(data){"success"==data.status&&(data.data.isDup?data.data.counts.NAME&&($scope.newFolderBackError.name="Name has been used!"):$scope.createFolder())}))},$scope.createFolder=function(){isoService.treeDir.createFolder($scope.selectedTreeNode.NODE_ID,$scope.newFolder).then(function(data){"success"==data.status?(msgPopup(isoLang.isoHeader,isoConst.msgPopupType.success,isoLang.createFolderSuccess),$scope.selectedTreeNode.nodes||($scope.selectedTreeNode.nodes={}),$scope.selectedTreeNode.nodes[data.data.NODE_ID]=angular.copy(data.data),null==$scope.selectedTreeNode.DEPARTMENT_ID?($scope.selectedTreeNode.nodes[data.data.NODE_ID].DEPARTMENT_ID=$scope.newFolder.department.DEPARTMENT_ID,$scope.selectedTreeNode.nodes[data.data.NODE_ID].DEPARTMENT_NAME=$scope.newFolder.department.DEPARTMENT_NAME):($scope.selectedTreeNode.nodes[data.data.NODE_ID].DEPARTMENT_ID=$scope.selectedTreeNode.DEPARTMENT_ID,$scope.selectedTreeNode.nodes[data.data.NODE_ID].DEPARTMENT_NAME=$scope.selectedTreeNode.DEPARTMENT_NAME),$scope.selectedTreeNode.nodes[data.data.NODE_ID].relativePath=$scope.selectedTreeNode.relativePath+"\\"+$scope.selectedTreeNode.nodes[data.data.NODE_ID].NODE_NAME,data.data.ACCESSIBLE_USER_ID||isoNode.inheritPermission($scope.selectedTreeNode.nodes[data.data.NODE_ID],$scope.selectedTreeNode)):msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,isoLang.createFolderError),$("#iso-tree-action-content-popup").modal("hide")},function(err){msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,isoLang.createFolderError)})},$scope.newDocumentBackErrorTemplate={name:"",docCode:""},$scope.beforeCreateDocument=function(){$scope.$broadcast("show-errors-check-validity"),$scope.actionContentForm.$valid&&null!=$scope.newDocument.nodeName&&""!=$scope.newDocument.nodeName&&($scope.newDocument.nodeId=$scope.selectedTreeNode.NODE_ID,$scope.newDocument.fatherNodeId=$scope.selectedTreeNode.NODE_ID,$scope.newDocument.relativePath=$scope.selectedTreeNode.relativePath+"\\"+$scope.newDocument.nodeName,$scope.newDocument.departmentId=null==$scope.selectedTreeNode.DEPARTMENT_ID?$scope.newDocument.department.DEPARTMENT_ID:$scope.selectedTreeNode.DEPARTMENT_ID,$scope.newDocument.documentTypeValue=$scope.newDocument.documentType.value,$scope.newDocumentBackError=angular.copy($scope.newDocumentBackErrorTemplate),isoService.treeDir.checkDupEntry($scope.newDocument.fatherNodeId,$scope.newDocument.nodeName,$scope.newDocument.docCode).then(function(data){"success"==data.status&&(data.data.isDup?(data.data.counts.NAME&&($scope.newDocumentBackError.name="Name has been used!"),data.data.counts.CODE&&($scope.newDocumentBackError.docCode="Document Code has been used!")):$scope.createDocument())}))},$scope.createDocument=function(){uploader.queue[0]?(uploader.queue[0].formData[0]={},uploader.queue[0].formData[0]=$scope.newDocument,uploader.uploadAll()):msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,isoLang.pleaseSelectFile)};var uploader=$scope.uploader=new FileUploader({url:"/api/iso/iso-tree-dir/create-document-with-file"});uploader.filters.push({name:"customFilter",fn:function(item,options){return this.queue.length<10}}),uploader.onWhenAddingFileFailed=function(item,filter,options){console.info("onWhenAddingFileFailed",item,filter,options)},uploader.onAfterAddingFile=function(fileItem){uploader.queue.splice(0,uploader.queue.length-1),console.info("onAfterAddingFile",fileItem)},uploader.onAfterAddingAll=function(addedFileItems){console.info("onAfterAddingAll",addedFileItems)},uploader.onBeforeUploadItem=function(item){console.info("onBeforeUploadItem",item)},uploader.onProgressItem=function(fileItem,progress){console.info("onProgressItem",fileItem,progress)},uploader.onProgressAll=function(progress){console.info("onProgressAll",progress)},uploader.onSuccessItem=function(fileItem,response,status,headers){console.info("onSuccessItem",fileItem,response,status,headers)},uploader.onErrorItem=function(fileItem,response,status,headers){console.info("onErrorItem",fileItem,response,status,headers)},uploader.onCancelItem=function(fileItem,response,status,headers){console.info("onCancelItem",fileItem,response,status,headers)},uploader.onCompleteItem=function(fileItem,response,status,headers){$("#iso-tree-action-content-popup").modal("hide"),response.status&&("success"==response.status?(msgPopup(isoLang.isoHeader,isoConst.msgPopupType.success,isoLang.createDocumentSuccess),$scope.selectedTreeNode.nodes||($scope.selectedTreeNode.nodes={}),$scope.selectedTreeNode.nodes[response.data.NODE_ID]=angular.copy(response.data),null==$scope.selectedTreeNode.DEPARTMENT_ID?($scope.selectedTreeNode.nodes[response.data.NODE_ID].DEPARTMENT_ID=$scope.newDocument.department.DEPARTMENT_ID,$scope.selectedTreeNode.nodes[response.data.NODE_ID].DEPARTMENT_NAME=$scope.newDocument.department.DEPARTMENT_NAME):($scope.selectedTreeNode.nodes[response.data.NODE_ID].DEPARTMENT_ID=$scope.selectedTreeNode.DEPARTMENT_ID,$scope.selectedTreeNode.nodes[response.data.NODE_ID].DEPARTMENT_NAME=$scope.selectedTreeNode.DEPARTMENT_NAME),$scope.selectedTreeNode.nodes[response.data.NODE_ID].relativePath=$scope.selectedTreeNode.relativePath+"\\"+$scope.selectedTreeNode.nodes[response.data.NODE_ID].NODE_NAME):msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,isoLang.createDocumentError)),uploader.queue.splice(0),console.info("onCompleteItem",fileItem,response,status,headers)},uploader.onCompleteAll=function(){console.info("onCompleteAll")},console.info("uploader",uploader),$scope.checkOutDocument=function(){isoService.checkOutIn.checkOutDocument($scope.selectedTreeNode.NODE_ID,$scope.selectedTreeNode.relativePath).then(function(data){$("#iso-tree-actions-menu-popup").modal("hide"),"success"==data.status?(msgPopup(isoLang.isoHeader,isoConst.msgPopupType.success,"Check out success, document has locked"),$window.location.href="/api/iso/iso-check-out-in/download-check-out-document?nodeId="+$scope.selectedTreeNode.NODE_ID+"&relativePath="+$scope.selectedTreeNode.relativePath,$scope.selectedTreeNode.CHECK_IN_STATUS=data.data.CHECK_IN_STATUS,$scope.selectedTreeNode.CHECK_IN_NO=data.data.CHECK_IN_NO):"lock"==data.status?msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Document is locked"):msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Check out fail!")},function(err){msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Check out fail!")})},$scope.beforeCheckIn=function(){isoService.checkOutIn.canCheckInDocument($scope.selectedTreeNode.NODE_ID).then(function(data){"success"==data.status?"1"==data.info?$scope.showTreeActionContentPopup($scope.treeActions.checkInDocument.name):"0"==data.info?msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Cannot check in because not check out"):"2"==data.info?msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"You cannot check in"):msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Error"):msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Error")},function(err){})},$scope.SubmitDocument=function(){isoService.hierarchyApproval.addHierarchyApprovalHeader($scope.selectedTreeNode.NODE_ID).then(function(data){"success"==data.status?(msgPopup("Submit Document",isoConst.msgPopupType.success,"Submit Document Success"),$scope.selectedTreeNode.SUBMIT_STATUS=isoConst.submitStatus.pending,$scope.selectedTreeNode.CHECK_IN_STATUS=isoConst.checkInStatus.lock):msgPopup("Submit Document",isoConst.msgPopupType.error,"Submit Document Error")},function(err){msgPopup("Submit Document",isoConst.msgPopupType.error,"Submit Document Error")})},$scope.cancelSubmitDocument=function(){isoService.checkOutIn.cancelSubmitDocument($scope.selectedTreeNode.NODE_ID).then(function(data){"success"==data.status?(msgPopup("Cancel Submit Document",isoConst.msgPopupType.success,"Cancel submit document success!"),$scope.selectedTreeNode.SUBMIT_STATUS=data.data.SUBMIT_STATUS,$scope.selectedTreeNode.CHECK_IN_STATUS=data.data.CHECK_IN_STATUS):msgPopup("Cancel Submit Document",isoConst.msgPopupType.error,"Cancel Submit Document Error")},function(err){msgPopup("Cancel Submit Document",isoConst.msgPopupType.error,"Cancel Submit Document Error")})},$scope.grantNodePermissionItem=function(nodeId,accessibleUserId,permission){isoService.treeUser.grantNodePermission(nodeId,accessibleUserId,permission).then(function(data){"success"==data.status?(alert("dung roi"),item.STATUS=data.status):(alert("sai roi"),item.STATUS=data.status)},function(err){item.STATUS="error"})},$scope.checkCanPermission=function(nodeId,userGrant,userIsGranted,permission){isoService.treeUser.checkCanPermission(nodeId,userGrant,userIsGranted,permission).then(function(data){},function(err){})},$scope.downloadNewestVersionDocument=function(){isoService.checkOutIn.downloadNewestVersionDocument($scope.selectedTreeNode.NODE_ID).then(function(){})},$scope.deleteNode=function(){isoService.treeDir.deleteNode($scope.selectedTreeNode.NODE_ID).then(function(data){if("success"==data.status){msgPopup(isoLang.isoHeader,isoConst.msgPopupType.success,"Delete success!");var deletex=function(node){node.ISENABLE=0,node.nodes&&angular.forEach(node.nodes,function(value,key){deletex(value)})};deletex($scope.selectedTreeNode),$scope.getTreeDir()}else msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Cannot delete!")},function(err){msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Cannot delete!")}).then(function(){$("#iso-tree-actions-menu-popup").modal("hide")})},$scope.restoreNode=function(){isoService.treeDir.restoreNode($scope.selectedTreeNode.NODE_ID).then(function(data){if("success"==data.status){msgPopup(isoLang.isoHeader,isoConst.msgPopupType.success,"Restore success!");var restore=function(node){node.ISENABLE=1,node.nodes&&angular.forEach(node.nodes,function(value,key){restore(value)})};restore($scope.selectedTreeNode)}else msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Cannot restore!")},function(err){msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Cannot restore!")}).then(function(){$("#iso-tree-actions-menu-popup").modal("hide")})},$scope.downloadFolderSelected=function(){var listNode=[],dequy=function(node){var item={NODE_ID:node.NODE_ID,relativePath:node.relativePath,NODE_TYPE:node.NODE_TYPE,NODE_NAME:node.NODE_NAME};listNode.push(item),node.nodes&&angular.forEach(node.nodes,function(values){dequy(values)})};dequy($scope.selectedTreeNode),console.log(listNode),isoService.treeDir.handlingCloneFolder($scope.selectedTreeNode.NODE_ID,listNode).then(function(data){"success"==data.status?isoService.treeDir.cloneFolder($scope.selectedTreeNode.NODE_ID,data.data.downloadPackName):msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Download folder fail!")},function(err){msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Download folder fail!")})},$scope.fullVersionDocumentData={},$scope.getFullVersionDoccument=function(){isoService.treeDir.getFullVersionDoccument($scope.selectedTreeNode.NODE_ID).then(function(data){"success"==data.status&&(console.log(data),$scope.fullVersionDocumentData=data.data)})},$scope.downloadVersionNo=function(FILE_NAME,CHECK_IN_FOLDER_STORAGE,NODE_ID){isoService.treeDir.handlingDownloadVersionDocument(FILE_NAME,CHECK_IN_FOLDER_STORAGE,NODE_ID)},$scope.fullCheckinDocumentData={},$scope.getFullCheckinDocument=function(){isoService.treeDir.getFullCheckinDoccument($scope.selectedTreeNode.NODE_ID).then(function(data){"success"==data.status&&(console.log(data),$scope.fullCheckinDocumentData=data.data)})},$scope.showDocumentInfo=function(Type,documentID){$scope.documentInfo=null,Type==$scope.nodeType.document?(console.log(Type),console.log(documentID),isoService.treeDir.selectDocument(documentID).then(function(data){"success"==data.status&&(console.log(data.data),data.data.Lasted_Edited_On=null!=data.data.LAST_UPDATED_DATE?moment(data.data.LAST_UPDATED_DATE).format("l"):null,$scope.documentInfo=data.data)}),angular.element("#document").fadeIn()):angular.element("#document").fadeOut()},$scope.closeDocument=function(){angular.element("#document").fadeOut()},$scope.sendRequestEditDocument=function(){$scope.newRequestEditDocument.nodeId=$scope.selectedTreeNode.NODE_ID,isoService.treeDir.sendRequestEditDocument($scope.newRequestEditDocument).then(function(data){"success"==data.status?msgPopup(isoLang.isoHeader,isoConst.msgPopupType.success,"Send request success!"):msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Send request fail!"),$("#iso-tree-action-content-popup").modal("hide")},function(err){msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Send request fail!")})},$scope.listYourRequest=[],$scope.getAllYourRequest=function(nodeId){isoService.requestEdit.getAllRequestOfUserLogin(nodeId).then(function(data){$scope.listYourRequest="success"==data.status?data.data:[]},function(err){$scope.listYourRequest=[]})},$scope.selectedYourRequest={},$scope.setSelectedYourRequest=function(item){$scope.selectedYourRequest=item,isoService.replyEdit.updateAdminReply(item.ID,0).then(function(data){"success"==data.status&&(console.log($scope.selectedTreeNode.NODE_ID),$scope.selectedYourRequest.HAVE_NEW_ADMIN_REPLY=0,$scope.getNumberAdminReplyOfRequest(item.NODE_ID))})},$scope.cancelYourRequest=function(id){isoService.requestEdit.cancelRequest(id).then(function(data){"success"==data.status?(msgPopup(isoLang.isoHeader,isoConst.msgPopupType.success,"Cancel request success!"),$scope.getAllYourRequest($scope.selectedTreeNode.NODE_ID)):msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Cancel request fail!")},function(err){msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Cancel request fail!")})},$scope.listAllRequest=[],$scope.getAllRequest=function(nodeId){isoService.requestEdit.getAllRequest(nodeId).then(function(data){"success"==data.status?($scope.listAllRequest=data.data,console.log($scope.listAllRequest)):$scope.listAllRequest=[]},function(err){$scope.listAllRequest=[]})},$scope.selectedRequest={},$scope.setSelectedRequest=function(item){$scope.selectedRequest=item,console.log($scope.selectedRequest),isoService.replyEdit.updateStaffReply(item.ID,0).then(function(data){"success"==data.status&&(console.log(item),$scope.selectedRequest.HAVE_NEW_STAFF_REPLY=0,$scope.getNumberStaffReplyOfRequest(item.NODE_ID))})},$scope.getNumberOfRequestUnread=function(nodeId){isoService.requestEdit.getNumberOfRequestUnread(nodeId).then(function(data){"success"==data.status&&($scope.selectedTreeNode.NUM_OF_REQUEST=data.data>0?data.data:null)},function(err){})},$scope.getNumberStaffReplyOfRequest=function(nodeId){isoService.replyEdit.getNumberStaffReplyOfRequest(nodeId).then(function(data){"success"==data.status&&(console.log(data.data),$scope.selectedTreeNode.NUM_STAFF_REPLY_OF_REQUEST=data.data.NUM_STAFF_REPLY_OF_REQUEST>0?data.data.NUM_STAFF_REPLY_OF_REQUEST:0)},function(err){})},$scope.getNumberAdminReplyOfRequest=function(nodeId){isoService.replyEdit.getNumberAdminReplyOfRequest(nodeId).then(function(data){"success"==data.status&&(console.log(data.data),$scope.selectedTreeNode.NUM_ADMIN_REPLY_OF_REQUEST=data.data.NUM_ADMIN_REPLY_OF_REQUEST>0?data.data.NUM_ADMIN_REPLY_OF_REQUEST:0)},function(err){})},$scope.setRequestIsRead=function(item){isoService.requestEdit.setRequestIsRead(item.ID).then(function(data){"success"==data.status?(msgPopup(isoLang.isoHeader,isoConst.msgPopupType.success,"Update success!"),$scope.getNumberOfRequestUnread(item.NODE_ID),item.IS_READ=1):msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Update fail!")},function(err){msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Update fail!")})},$scope.setRequestStar=function(item){var star=1==item.STAR?0:1;isoService.requestEdit.setRequestStar(item.ID,star).then(function(data){"success"==data.status?(msgPopup(isoLang.isoHeader,isoConst.msgPopupType.success,"Update success!"),item.STAR=star,$scope.getNumberOfRequestUnread(item.NODE_ID)):msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Update fail!")},function(err){msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Update fail!")})},$scope.releaseDocumentOneClick=function(){isoService.checkOutIn.submitDocument($scope.selectedTreeNode.NODE_ID).then(function(data){if("success"==data.status){var checkOutInId=data.data.checkOutInId;isoService.checkOutIn.approvedDocument($scope.selectedTreeNode.NODE_ID,checkOutInId).then(function(data){"success"==data.status?(msgPopup("Release",isoConst.msgPopupType.success,"Release Document Success"),$scope.selectedTreeNode.SUBMIT_STATUS=data.data.SUBMIT_STATUS,$scope.selectedTreeNode.CHECK_IN_STATUS=data.data.CHECK_IN_STATUS,$scope.selectedTreeNode.CURRENT_VERSION_ID=data.data.CURRENT_VERSION_ID,isoService.checkOutIn.sendEmailNotificationNewDocumentVersion($scope.selectedTreeNode.NODE_ID).then(function(data){},function(err){})):msgPopup("Release",isoConst.msgPopupType.error,"Release Error")},function(err){msgPopup("Release",isoConst.msgPopupType.error,"Release Error")})}else msgPopup("Release",isoConst.msgPopupType.error,"Release Document Error")},function(err){msgPopup("Release",isoConst.msgPopupType.error,"Release Document Error")})},$scope.forceReleaseDocumentOneClick=function(){isoService.checkOutIn.forceSubmitDocument($scope.selectedTreeNode.NODE_ID).then(function(data){if("success"==data.status){var checkOutInId=data.data.checkOutInId;isoService.checkOutIn.forceApprovedDocument($scope.selectedTreeNode.NODE_ID,checkOutInId).then(function(data){"success"==data.status?(msgPopup("Force Release",isoConst.msgPopupType.success,"Force Release Document Success"),$scope.selectedTreeNode.SUBMIT_STATUS=data.data.SUBMIT_STATUS,$scope.selectedTreeNode.CHECK_IN_STATUS=data.data.CHECK_IN_STATUS,$scope.selectedTreeNode.CURRENT_VERSION_ID=data.data.CURRENT_VERSION_ID,isoService.checkOutIn.sendEmailNotificationNewDocumentVersion($scope.selectedTreeNode.NODE_ID).then(function(data){},function(err){})):msgPopup("Force Release",isoConst.msgPopupType.error,"Force Release Error")},function(err){msgPopup("Force Release",isoConst.msgPopupType.error,"Force Release Error")})}else msgPopup("Force Release",isoConst.msgPopupType.error,"Force Release Document Error")},function(err){msgPopup("Force Release",isoConst.msgPopupType.error,"Force Release Document Error")})},$scope.makeCurrentVersion=function(nodeId,checkOutInId){isoService.checkOutIn.makeCurrentVersion(nodeId,checkOutInId).then(function(data){"success"==data.status?(msgPopup("Make Current Version",isoConst.msgPopupType.success,"Make Current Version Success"),$scope.getFullVersionDoccument()):msgPopup("Make Current Version",isoConst.msgPopupType.error,"Make Current Version Error")},function(err){msgPopup("Make Current Version",isoConst.msgPopupType.error,"Make Current Version Error")})},$scope.forceCheckOutDocument=function(item){isoService.checkOutIn.forceCheckOutDocument(item.NODE_ID,item.ID).then(function(data){$("#iso-tree-actions-menu-popup").modal("hide"),"success"==data.status?(msgPopup(isoLang.isoHeader,isoConst.msgPopupType.success,"Check out success, document has locked"),$scope.selectedTreeNode.CHECK_IN_STATUS=data.data.CHECK_IN_STATUS,$scope.selectedTreeNode.CHECK_IN_NO=data.data.CHECK_IN_NO,isoService.checkOutIn.downloadSpecificCheckIn(item.NODE_ID,item.ID)):"lock"==data.status?msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Document is locked"):msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Check out fail!")},function(err){msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Check out fail!")})},$scope.downloadSpecificCheckIn=function(item){isoService.checkOutIn.downloadSpecificCheckIn(item.NODE_ID,item.ID)},$scope.newName={value:""},$scope.changeNodeName=function(){$scope.actionContentForm.$valid&&isoService.treeDir.renameNode($scope.selectedTreeNode.NODE_ID,$scope.selectedTreeNode.NODE_NAME,$scope.newName.value).then(function(data){"success"==data.status?(msgPopup(isoLang.isoHeader,isoConst.msgPopupType.success,"Rename success!"),$scope.getTreeDir()):msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Rename fail!")},function(err){msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Rename fail!")}).then(function(){$("#iso-tree-action-content-popup").modal("hide"),$scope.newName={value:""}})},$scope.deleteNodeForever=function(){isoService.treeDir.deleteNodeForever($scope.selectedTreeNode.NODE_ID).then(function(data){"success"==data.status?(msgPopup(isoLang.isoHeader,isoConst.msgPopupType.success,"Delete node forever success."),$scope.getTreeDir()):msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Delete node forever fail.")},function(err){msgPopup(isoLang.isoHeader,isoConst.msgPopupType.error,"Delete node forever fail.")}).then(function(){$("#iso-tree-actions-menu-popup").modal("hide")})}}),angular.module("app.loggedIn.iso.directive",[]).directive("isoDemoDirective",function(){return{restrict:"E",transclude:!0,required:["^ngModel"],scope:{message:"@",type:"="},templateUrl:"modules/rediLegalOnlineBooking/directives/rlob_fade_in_out_template.html",controller:function($scope){}}}).directive("isoNoticeFinishRenderDirectoryTree",function(){return function(scope,element,attrs){scope.$last&&($(".tree > ul").attr("role","tree").find("ul").attr("role","group"),$(".tree").find("li:has(ul)").addClass("parent_li").attr("role","treeitem").find(" > span").attr("title","Collapse this branch").unbind("click"),$(".tree").find("li:has(ul)").addClass("parent_li").attr("role","treeitem").find(" > span").attr("title","Collapse this branch").on("click",function(e){
var children=$(this).parent("li.parent_li").find(" > ul > li");children.is(":visible")?(children.hide("fast"),$(this).attr("title","Expand this branch").find(" > i").addClass("fa-plus").removeClass("fa-minus")):(children.show("fast"),$(this).attr("title","Collapse this branch").find(" > i").addClass("fa-minus").removeClass("fa-plus")),e.stopPropagation()}))}}).directive("isoCheckInDocument",function(){return{restrict:"E",transclude:!0,required:["^ngModel"],scope:{selectedTreeNode:"=",isCreateNewCheckIn:"="},templateUrl:"modules/iso/directives/isoCheckInDocument.html",controller:function($scope,isoService,FileUploader){if($scope.checkInInfo={checkInComment:""},$scope.isCreateNewCheckIn===!0)var uploader=$scope.uploader=new FileUploader({url:"/api/iso/iso-check-out-in/create-new-check-in-document"});else var uploader=$scope.uploader=new FileUploader({url:"/api/iso/iso-check-out-in/check-in-document"});uploader.filters.push({name:"customFilter",fn:function(item,options){return this.queue.length<10}}),uploader.onWhenAddingFileFailed=function(item,filter,options){console.info("onWhenAddingFileFailed",item,filter,options)},uploader.onAfterAddingFile=function(fileItem){uploader.queue.splice(0,uploader.queue.length-1),console.info("onAfterAddingFile",fileItem)},uploader.onAfterAddingAll=function(addedFileItems){console.info("onAfterAddingAll",addedFileItems)},uploader.onBeforeUploadItem=function(item){console.info("onBeforeUploadItem",item)},uploader.onProgressItem=function(fileItem,progress){console.info("onProgressItem",fileItem,progress)},uploader.onProgressAll=function(progress){console.info("onProgressAll",progress)},uploader.onSuccessItem=function(fileItem,response,status,headers){console.info("onSuccessItem",fileItem,response,status,headers)},uploader.onErrorItem=function(fileItem,response,status,headers){console.info("onErrorItem",fileItem,response,status,headers)},uploader.onCancelItem=function(fileItem,response,status,headers){console.info("onCancelItem",fileItem,response,status,headers)},uploader.onCompleteItem=function(fileItem,response,status,headers){$("#iso-tree-action-content-popup").modal("hide"),response.status&&("success"==response.status?(isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.success,"Check in success!"),$scope.selectedTreeNode.CHECK_IN_STATUS=response.data.CHECK_IN_STATUS,$scope.selectedTreeNode.CHECK_IN_NO=response.data.CHECK_IN_NO,$scope.selectedTreeNode.SUBMIT_STATUS=response.data.SUBMIT_STATUS,uploader.queue.splice(0)):isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Check in fail!")),console.info("onCompleteItem",fileItem,response,status,headers)},uploader.onCompleteAll=function(){console.info("onCompleteAll")},console.info("uploader",uploader),$scope.checkIn=function(){$scope.checkInForm.$valid&&($scope.checkInInfo.nodeId=$scope.selectedTreeNode.NODE_ID,$scope.checkInInfo.relativePath=$scope.selectedTreeNode.relativePath,uploader.queue[0]?(uploader.queue[0].formData[0]={},uploader.queue[0].formData[0]=$scope.checkInInfo,uploader.uploadAll()):isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,isoLang.pleaseSelectFile))}}}}).directive("showErrors",function($timeout,showErrorsConfig){var getShowSuccess,linkFn;return getShowSuccess=function(options){var showSuccess;return showSuccess=showErrorsConfig.showSuccess,options&&null!=options.showSuccess&&(showSuccess=options.showSuccess),showSuccess},linkFn=function(scope,el,attrs,formCtrl){var blurred,inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses;if(blurred=!1,options=scope.$eval(attrs.showErrors),showSuccess=getShowSuccess(options),inputEl=el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=inputNgEl.attr("name"),!inputName)throw"show-errors element has no child input elements with a 'name' attribute";return inputNgEl.bind("blur",function(){return blurred=!0,toggleClasses(formCtrl[inputName].$invalid)}),scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return blurred?toggleClasses(invalid):void 0}),scope.$on("show-errors-check-validity",function(){return toggleClasses(formCtrl[inputName].$invalid)}),scope.$on("show-errors-reset",function(){return $timeout(function(){return el.removeClass("has-error"),el.removeClass("has-success"),blurred=!1},0,!1)}),toggleClasses=function(invalid){return el.toggleClass("has-error",invalid),showSuccess?el.toggleClass("has-success",!invalid):void 0}},{restrict:"A",require:"^form",compile:function(elem,attrs){if(!elem.hasClass("form-group"))throw"show-errors element does not have the 'form-group' class";return linkFn}}}).provider("showErrorsConfig",function(){var _showSuccess;_showSuccess=!1,this.showSuccess=function(showSuccess){return _showSuccess=showSuccess},this.$get=function(){return{showSuccess:_showSuccess}}}).directive("isoReplyEditDocument",function(){return{restrict:"E",transclude:!0,required:["^ngModel"],scope:{requestData:"=",adminData:"="},templateUrl:"modules/iso/directives/isoReplyEditDocument.html",controller:function($scope,isoService,$cookieStore){$scope.setListReply=function(IDREQUEST){isoService.replyEdit.getAllReplyEditDocument(IDREQUEST).then(function(data){"success"==data.status&&($scope.listReplyEditDocument=data.data,console.log($scope.listReplyEditDocument))})},$scope.$watch("requestData",function(oldValue,newValue){$scope.setListReply($scope.requestData)}),$scope.insertReply=function(comment){console.log($scope.adminData),console.log(isoConst.isoPermission.administrator);var value=1;isoService.replyEdit.insertReplyEditDocument($scope.requestData,comment).then(function(data){"success"==data.status&&($scope.adminData==isoConst.isoPermission.administrator?isoService.replyEdit.updateAdminReply($scope.requestData,value).then(function(data){"success"==data.status&&($scope.comment=null,$scope.setListReply($scope.requestData))}):isoService.replyEdit.updateStaffReply($scope.requestData,value).then(function(data){"success"==data.status&&($scope.comment=null,$scope.setListReply($scope.requestData))}))})}}}}),angular.module("app.loggedIn.iso.selectionUserName.directive",[]).directive("isoSelectionUserName",function(){return{restrict:"E",transclude:!0,required:["^ngModel"],scope:{show:"=",selectedUserName:"="},templateUrl:"modules/iso/directives/isoSelectionUserName.html",controller:function($scope,isoService){$scope.userNameKey="",$scope.userNameList=[],$scope.filterUserName=function(){$scope.currentPage=1,$scope.handleUserNameListPaging()},$scope.handleUserNameListPaging=function(){$scope.userNameList=[],isoService.core.getCountUserName($scope.userNameKey).then(function(data){"success"==data.status&&($scope.totalItems=data.data.NUM_OF_USER_NAME,$scope.itemsPerPage=5,$scope.maxSize=7,isoService.core.getUserNameList($scope.userNameKey,$scope.currentPage,$scope.itemsPerPage).then(function(data){"success"==data.status&&($scope.userNameList=data.data)},function(err){}))},function(err){})},$scope.filterUserName(),$scope.autoInc=0,$scope.getSelectedUserName=function(user){$scope.selectedUserName.user_name=user.user_name,$scope.selectedUserName.id=user.id,$scope.autoInc++,$scope.selectedUserName.autoInc=$scope.autoInc,$scope.show=!1}}}}),angular.module("app.loggedIn.iso.selectionGroupUser.directive",[]).directive("isoSelectionGroupUser",function(){return{restrict:"E",transclude:!0,required:["^ngModel"],scope:{show:"=",selectedGroup:"="},templateUrl:"modules/iso/directives/isoSelectionGroupUser.html",controller:function($scope,isoService){$scope.groupList=[],isoService.isoUserGroup.getUserGroupList().then(function(data){$scope.groupList="success"==data.status?data.data:[]},function(err){$scope.groupList=[]}),$scope.setSelectedGroup=function(group){$scope.selectedGroup.GROUP_NAME=group.GROUP_NAME,$scope.selectedGroup.GROUP_ID=group.GROUP_ID,$scope.show=!1}}}}),angular.module("app.loggedIn.iso.grantUserPermission.directive",[]).directive("isoGrantUserPermission",function(){return{restrict:"E",transclude:!0,required:["^ngModel"],scope:{selectedTreeNode:"="},templateUrl:"modules/iso/directives/isoGrantUserPermission.html",controller:function($scope,isoService,FileUploader){$scope.currentIsoCustom=currentIsoCustom,$scope.refreshNodePermission=function(){$scope.administratorUserList={},isoService.core.gerUsersInPermissionGroup($scope.selectedTreeNode.NODE_ID,isoConst.isoPermission.administrator).then(function(data){if("success"==data.status){for(var i=0;i<data.data.length;i++)$scope.administratorUserList[data.data[i].GROUP_NAME]||($scope.administratorUserList[data.data[i].GROUP_NAME]=[]),$scope.administratorUserList[data.data[i].GROUP_NAME].push(data.data[i]);exlog.log($scope.administratorUserList)}},function(err){}),$scope.createUserList={},isoService.core.gerUsersInPermissionGroup($scope.selectedTreeNode.NODE_ID,isoConst.isoPermission.create).then(function(data){if("success"==data.status)for(var i=0;i<data.data.length;i++)$scope.createUserList[data.data[i].GROUP_NAME]||($scope.createUserList[data.data[i].GROUP_NAME]=[]),$scope.createUserList[data.data[i].GROUP_NAME].push(data.data[i])},function(err){}),$scope.updateUserList={},isoService.core.gerUsersInPermissionGroup($scope.selectedTreeNode.NODE_ID,isoConst.isoPermission.update).then(function(data){if("success"==data.status)for(var i=0;i<data.data.length;i++)$scope.updateUserList[data.data[i].GROUP_NAME]||($scope.updateUserList[data.data[i].GROUP_NAME]=[]),$scope.updateUserList[data.data[i].GROUP_NAME].push(data.data[i])},function(err){}),$scope.readUserList={},isoService.core.gerUsersInPermissionGroup($scope.selectedTreeNode.NODE_ID,isoConst.isoPermission.read).then(function(data){if("success"==data.status)for(var i=0;i<data.data.length;i++)$scope.readUserList[data.data[i].GROUP_NAME]||($scope.readUserList[data.data[i].GROUP_NAME]=[]),$scope.readUserList[data.data[i].GROUP_NAME].push(data.data[i])},function(err){})},$scope.$watchCollection("selectedTreeNode",function(newValues,oldValues){$scope.selectedTreeNode&&$scope.refreshNodePermission()}),$scope.grantNodePermission=function(nodeId,user,permission){isoService.treeUser.checkCanPermission(nodeId,user.id,permission).then(function(data){"success"==data.status?1==data.info?isoService.treeUser.grantNodePermission(nodeId,user.id,permission).then(function(data){"success"==data.status?(permission<isoConst.isoPermission.notPermission?isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.success,"Add "+user.user_name+" to group success!"):isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.success,"Remove "+user.user_name+" from group success!"),$scope.refreshNodePermission()):permission<isoConst.isoPermission.notPermission?isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Add "+user.user_name+" to group fail!"):isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Remove "+user.user_name+" from group fail!")},function(err){permission<isoConst.isoPermission.notPermission?isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Add "+user.user_name+" to group fail!"):isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Remove "+user.user_name+" from group fail!")}):permission<isoConst.isoPermission.notPermission?isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"You cannot grant permission to "+user.user_name):isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"You cannot remove "+user.user_name+" from group"):isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Error!")},function(err){isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Error!")})},$scope.showSelectionAdminUserName=!1,$scope.newAdminUserName={},$scope.$watchCollection("newAdminUserName",function(oldValues,newValues){$scope.newAdminUserName&&$scope.newAdminUserName.user_name&&$scope.grantNodePermission($scope.selectedTreeNode.NODE_ID,$scope.newAdminUserName,isoConst.isoPermission.administrator)}),$scope.showSelectionCreateUserName=!1,$scope.newCreateUserName={},$scope.$watchCollection("newCreateUserName",function(oldValues,newValues){$scope.newCreateUserName&&$scope.newCreateUserName.user_name&&$scope.grantNodePermission($scope.selectedTreeNode.NODE_ID,$scope.newCreateUserName,isoConst.isoPermission.create)}),$scope.showSelectionUpdateUserName=!1,$scope.newUpdateUserName={},$scope.$watchCollection("newUpdateUserName",function(oldValues,newValues){$scope.newUpdateUserName&&$scope.newUpdateUserName.user_name&&$scope.grantNodePermission($scope.selectedTreeNode.NODE_ID,$scope.newUpdateUserName,isoConst.isoPermission.update)}),$scope.showSelectionReadUserName=!1,$scope.newReadUserName={},$scope.$watchCollection("newReadUserName",function(oldValues,newValues){$scope.newReadUserName&&$scope.newReadUserName.user_name&&$scope.grantNodePermission($scope.selectedTreeNode.NODE_ID,$scope.newReadUserName,isoConst.isoPermission.read)}),$scope.showSelectionAdminGroup=!1,$scope.newAdminGroup={},$scope.$watchCollection("newAdminGroup",function(oldValues,newValues){$scope.newAdminGroup&&$scope.newAdminGroup.GROUP_NAME&&isoService.treeUser.grantGroupUserPermission($scope.selectedTreeNode.NODE_ID,$scope.newAdminGroup.GROUP_ID,isoConst.isoPermission.administrator).then(function(data){"success"==data.status?"success"==data.status?(isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.success,"Add group success!"),$scope.refreshNodePermission()):isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Add group fail!"):isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Error!")},function(err){isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Error!")})}),$scope.showSelectionCreateGroup=!1,$scope.newCreateGroup={},$scope.$watchCollection("newCreateGroup",function(oldValues,newValues){$scope.newCreateGroup&&$scope.newCreateGroup.GROUP_NAME&&isoService.treeUser.grantGroupUserPermission($scope.selectedTreeNode.NODE_ID,$scope.newCreateGroup.GROUP_ID,isoConst.isoPermission.create).then(function(data){"success"==data.status?"success"==data.status?(isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.success,"Add group success!"),$scope.refreshNodePermission()):isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Add group fail!"):isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Error!")},function(err){isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Error!")})}),$scope.showSelectionUpdateGroup=!1,$scope.newUpdateGroup={},$scope.$watchCollection("newUpdateGroup",function(oldValues,newValues){$scope.newUpdateGroup&&$scope.newUpdateGroup.GROUP_NAME&&isoService.treeUser.grantGroupUserPermission($scope.selectedTreeNode.NODE_ID,$scope.newUpdateGroup.GROUP_ID,isoConst.isoPermission.update).then(function(data){"success"==data.status?"success"==data.status?(isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.success,"Add group success!"),$scope.refreshNodePermission()):isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Add group fail!"):isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Error!")},function(err){isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Error!")})}),$scope.showSelectionReadGroup=!1,$scope.newReadGroup={},$scope.$watchCollection("newReadGroup",function(oldValues,newValues){$scope.newReadGroup&&$scope.newReadGroup.GROUP_NAME&&isoService.treeUser.grantGroupUserPermission($scope.selectedTreeNode.NODE_ID,$scope.newReadGroup.GROUP_ID,isoConst.isoPermission.read).then(function(data){"success"==data.status?"success"==data.status?(isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.success,"Add group success!"),$scope.refreshNodePermission()):isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Add group fail!"):isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Error!")},function(err){isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Error!")})}),$scope.removePermission=function(u){var user={id:u.id,user_name:u.user_name};$scope.grantNodePermission($scope.selectedTreeNode.NODE_ID,user,isoConst.isoPermission.notPermission)},$scope.removePermissionOfGroup=function(groupId){return groupId?void isoService.treeUser.grantGroupUserPermission($scope.selectedTreeNode.NODE_ID,groupId,isoConst.isoPermission.notPermission).then(function(data){"success"==data.status?"success"==data.status?(isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.success,"Remove permission of this group success!"),$scope.refreshNodePermission()):isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Remove permission of this group fail!"):isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Error!")},function(err){isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Error!")}):void isoMsg.popup(isoLang.isoHeader,isoConst.msgPopupType.error,"Error!")}}}});var isoTest=!1,isoCustomList={full:{admin:{value:0,display:"Admin"},create:{value:1,display:"Create"},update:{value:2,display:"Update"},read:{value:3,display:"Read"}},zipQms:{admin:{value:0,display:"Admin"},update:{value:2,display:"Staff"},read:{value:3,display:"Viewer"}}},currentIsoCustom=isoCustomList.zipQms,isoHelper={setSlimCroll:function(selector){$(selector).slimscroll({})}},isoConst={nodeType:{folder:"FOLDER",document:"DOC"},msgPopupType:{success:"success",error:"error"},dbError:{ER_DUP_ENTRY:"ER_DUP_ENTRY"},submitStatus:{pending:"PENDING",approved:"APPROVED",reject:"REJECTED",cancel:"CANCEL"},isoPermission:{administrator:0,create:1,update:2,read:3,notPermission:4},isoAdminFunction:{restoreFolder:!0,restoreDocument:!0,forceCheckInDocument:!0,forceReleaseDocumentOneClick:!0,createNewCheckInDocument:!0,deleteNodeForever:!0},userFunction:{createFolder:"createFolder",deleteFolder:"deleteFolder",cloneToPC:"cloneToPC",grantFolderPermission:"cloneFolderPermission",createDocument:"createDocument",checkOut:"checkOut",forceCheckOut:"forceCheckOut",checkIn:"checkIn",createNewCheckInDocument:"createNewCheckInDocument",submitDocument:"submitDocument",cancelSubmitDocument:"cancelSubmitDocument",requestEditDocument:"requestEditDocument",viewYourRequest:"viewYourRequest",viewAllRequest:"viewAllRequest",deleteDocument:"deleteDocument",grantDocumentPermission:"grantDocumentPermission",downloadNewestVersion:"downloadNewestVersion",releaseDocumentOneClick:"releaseDocumentOneClick",makeCurrentVersion:"makeCurrentVersion",renameNode:"renameNode"},permissionFunction:{0:{createFolder:!0,deleteFolder:!0,cloneToPC:!0,grantFolderPermission:!0,createDocument:!0,checkOut:!0,forceCheckOut:!0,checkIn:!0,submitDocument:!1,cancelSubmitDocument:!1,deleteDocument:!0,grantDocumentPermission:!0,downloadNewestVersion:!0,getFullVersionDoccument:!0,getFullCheckinDoccument:!0,viewAllRequest:!0,releaseDocumentOneClick:!0,makeCurrentVersion:!0,renameNode:!0},1:{createFolder:!1,deleteFolder:!1,cloneToPC:!0,createDocument:!1,checkOut:!1,forceCheckOut:!1,checkIn:!1,submitDocument:!1,cancelSubmitDocument:!1,deleteDocument:!1,downloadNewestVersion:!0,getFullVersionDoccument:!0,getFullCheckinDoccument:!0,requestEditDocument:!0,viewYourRequest:!0},2:{cloneToPC:!0,checkOut:!1,forceCheckOut:!1,checkIn:!1,submitDocument:!1,cancelSubmitDocument:!1,downloadNewestVersion:!0,getFullVersionDoccument:!0,getFullCheckinDoccument:!0,requestEditDocument:!0,viewYourRequest:!0},3:{cloneToPC:!0,downloadNewestVersion:!0,getFullVersionDoccument:!0,getFullCheckinDoccument:!0}},checkInStatus:{lock:"LOCK",unlock:"UNLOCK"},hierarchyApprovalStatus:{notYetReview:"not underReviewyet review",underReview:"under review",approved:"approved",rejected:"rejected"},requestEditStatus:{pending:"PENDING",accept:"ACCEPT",reject:"REJECT",cancel:"CANCEL"},documentTypeList:[{value:"Procedure"},{value:"User Manual"},{value:"Policy"},{value:"Templates"}]},isoLang={isoHeader:"ISO SYSTEM",createFolderSuccess:"Create folder success!",createFolderError:"Create folder error!",createDocumentSuccess:"Create document success!",createDocumentError:"Create document error!",pleaseSelectFile:"Please select file!"},isoMsg={popup:function(header,type,content){$("#iso-global-msg-popup .iso-global-msg-popup-header").text(header),type==isoConst.msgPopupType.success&&($("#iso-global-msg-popup .iso-global-msg-popup-success").show(),$("#iso-global-msg-popup .iso-global-msg-popup-error").hide(),$("#iso-global-msg-popup .iso-global-msg-popup-success .iso-global-msg-popup-content").text(content)),type==isoConst.msgPopupType.error&&($("#iso-global-msg-popup .iso-global-msg-popup-error").show(),$("#iso-global-msg-popup .iso-global-msg-popup-success").hide(),$("#iso-global-msg-popup .iso-global-msg-popup-error .iso-global-msg-popup-content").text(content)),$("#iso-global-msg-popup").modal({show:!0,backdrop:"static"})}},isoNode={inheritPermission:function(child,parent){parent&&parent.PERMISSION&&(child.PERMISSION=parent.PERMISSION)}},isoFolder={inheritPermission:function(child,parent){parent&&(child.ACCESSIBLE_USER_ID=parent.ACCESSIBLE_USER_ID,child.IS_READ=parent.IS_READ,child.IS_CREATE=parent.IS_CREATE,child.IS_UPDATE=parent.IS_UPDATE,child.IS_DELETE=parent.IS_DELETE,child.IS_GRANT_PERMISSION=parent.IS_GRANT_PERMISSION)}},isoDocument={inheritPermission:function(child,parent){parent&&(child.ACCESSIBLE_USER_ID=parent.ACCESSIBLE_USER_ID,child.IS_READ=parent.IS_READ,child.IS_CREATE=parent.IS_CREATE,child.IS_UPDATE=parent.IS_UPDATE,child.IS_DELETE=parent.IS_DELETE,child.IS_GRANT_PERMISSION=parent.IS_GRANT_PERMISSION)}};angular.module("app.loggedIn.isoSubmitStatusPendingController.controller",[]).controller("isoSubmitStatusPendingController",function($scope,$http,$state,$window,$cookieStore,FileUploader,toastr,isoService){isoService.checkOutIn.checkCanAccessApprovalPage().then(function(data){"success"!=data.status&&$state.go("loggedIn.iso.main")},function(err){$state.go("loggedIn.iso.main")}),$scope.checkInOutStatusPending={};var msgPopup=isoMsg.popup,getAllOutInStatusPending=function(){$scope.currentPage=1,$scope.handleListPaging()};$scope.handleListPaging=function(){isoService.checkOutIn.countOutIn().then(function(data){"success"==data.status&&($scope.totalItems=data.data[0].SumData,$scope.itemsPerPage=5,$scope.maxSize=7,isoService.checkOutIn.getAllOutInStatusPending($scope.currentPage,$scope.itemsPerPage).then(function(data){"success"==data.status&&($scope.checkInOutStatusPending=data.data)}))})},getAllOutInStatusPending(),$scope.approved=function(id,node_id){var info={ID:id,status:isoConst.submitStatus.approved,Node_ID:node_id};isoService.checkOutIn.approvedAndReject(info).then(function(data){"success"==data.status?(msgPopup("Approved",isoConst.msgPopupType.success,"Approved Success"),getAllOutInStatusPending()):msgPopup("Approved",isoConst.msgPopupType.error,"Approved Error")})},$scope.rejects=function(id,node_id){var info={ID:id,status:isoConst.submitStatus.reject,Node_ID:node_id};isoService.checkOutIn.approvedAndReject(info).then(function(data){"success"==data.status?(msgPopup("Reject",isoConst.msgPopupType.success,"Reject Success"),getAllOutInStatusPending()):msgPopup("Reject",isoConst.msgPopupType.Error,"Reject Error")})},$scope.downloadFile=function(nodeId,checkOutInId){isoService.checkOutIn.dowloadFile(nodeId,checkOutInId).then(function(data){})},$scope.approvedDocument=function(nodeId,checkOutInId){isoService.checkOutIn.approvedDocument(nodeId,checkOutInId).then(function(data){"success"==data.status?(msgPopup("Approved",isoConst.msgPopupType.success,"Approved Success"),getAllOutInStatusPending(),isoService.checkOutIn.sendEmailNotificationNewDocumentVersion(nodeId).then(function(data){},function(err){})):msgPopup("Approved",isoConst.msgPopupType.error,"Approved Error")},function(err){msgPopup("Approved",isoConst.msgPopupType.error,"Approved Error")})},$scope.rejectedDocument=function(checkOutInId){isoService.checkOutIn.rejectedDocument(checkOutInId).then(function(data){"success"==data.status?(msgPopup("Reject",isoConst.msgPopupType.success,"Reject Success"),getAllOutInStatusPending()):msgPopup("Reject",isoConst.msgPopupType.error,"Reject Error")},function(err){msgPopup("Reject",isoConst.msgPopupType.error,"Reject Error")})}}),angular.module("app.loggedIn.isoHierarchyApprovalController.controller",[]).controller("isoHierarchyApprovalController",function($scope,$http,$state,$window,$cookieStore,FileUploader,toastr,isoService){$scope.hierarchyApprovalStatus=isoConst.hierarchyApprovalStatus,$scope.submitStatus=isoConst.submitStatus,$scope.hierarchyApprovalTreeTemp={},$scope.hierarchyApprovalTree={},isoService.hierarchyApproval.getAllHierarchyLineForUser().then(function(data){if("success"==data.status){for(var i=0;i<data.data.length;i++){var item=data.data[i];$scope.hierarchyApprovalTreeTemp[item.APPR_LINE_ID]=item}for(var i=0;i<data.data.length;i++){var item=data.data[i];$scope.hierarchyApprovalTreeTemp[item.PREVIOUS_LINE_ID]&&($scope.hierarchyApprovalTreeTemp[item.PREVIOUS_LINE_ID].NEXT_LINE_ID=item.APPR_LINE_ID)}for(var i=0;i<data.data.length;i++){var item=data.data[i];$scope.hierarchyApprovalTreeTemp[item.NEXT_LINE_ID]&&($scope.hierarchyApprovalTreeTemp[item.NEXT_LINE_ID].nodes={},$scope.hierarchyApprovalTreeTemp[item.NEXT_LINE_ID].nodes[item.APPR_LINE_ID]=item)}angular.forEach($scope.hierarchyApprovalTreeTemp,function(value,key){null==value.NEXT_LINE_ID&&($scope.hierarchyApprovalTree[value.APPR_LINE_ID]=value)}),console.log(">>>>>"),console.log($scope.hierarchyApprovalTree)}},function(err){}),$scope.approved=function(line){var approvalInfo={hierarchyHeaderId:line.APPR_HEADER_ID,hierarchyLineId:line.APPR_LINE_ID,hierarchyNodeId:line.NODE_ID,sourceLineId:line.SOURCE_LINE_ID,status:isoConst.hierarchyApprovalStatus.approved,isoNodeId:line.SOURCE_HEADER_ID};isoService.hierarchyApproval.approval(approvalInfo).then(function(data){"success"==data.status?(line.STATUS=isoConst.hierarchyApprovalStatus.approved,isoMsg.popup("Approved",isoConst.msgPopupType.success,"Approved Document Success!"),data.info&&"release"==data.info&&isoService.checkOutIn.sendEmailNotificationNewDocumentVersion(line.SOURCE_HEADER_ID).then(function(data){},function(err){})):isoMsg.popup("Approved",isoConst.msgPopupType.error,"Approved Document fail!")},function(err){isoMsg.popup("Approved",isoConst.msgPopupType.error,"Approved Document fail!")})},$scope.rejected=function(line){var approvalInfo={hierarchyHeaderId:line.APPR_HEADER_ID,hierarchyLineId:line.APPR_LINE_ID,hierarchyNodeId:line.NODE_ID,sourceLineId:line.SOURCE_LINE_ID,status:isoConst.hierarchyApprovalStatus.rejected,isoNodeId:line.SOURCE_HEADER_ID};isoService.hierarchyApproval.approval(approvalInfo).then(function(data){"success"==data.status?(line.STATUS=isoConst.hierarchyApprovalStatus.rejected,isoMsg.popup("Rejected",isoConst.msgPopupType.success,"Rejected Document Success!")):isoMsg.popup("Rejected",isoConst.msgPopupType.error,"Rejected Document fail!")},function(err){isoMsg.popup("Rejected",isoConst.msgPopupType.error,"Rejected Document fail!")})},$scope.downloadFile=function(line){isoService.hierarchyApproval.downloadFileCheckOutIn(line.SOURCE_HEADER_ID,line.SOURCE_LINE_ID).then(function(data){})}}),angular.module("app.loggedIn.iso.userGroup.controller",[]).controller("isoUserGroupController",function($scope,isoService,$state){isoService.isoAdmin.checkIsAdminIsoSystem().then(function(data){"success"!=data.status&&$state.go("loggedIn.iso.main")},function(err){$state.go("loggedIn.iso.main")}),isoService.isoUserGroup.getUserGroupList().then(function(data){$scope.userGroupList="success"==data.status?data.data:[]},function(err){$scope.userGroupList=[]}),$scope.actions={editGroup:{name:"editGroup",header:"Edit Group",buttonLabel:"OK",url:"iso_user_group_edit_template.html"},addGroup:{name:"addGroup",header:"Add Group",buttonLabel:"Add",url:"iso_user_group_add_template.html"},editUser:{name:"editUser",header:"Edit User",buttonLabel:"OK",url:"iso_user_group_edit_user_template.html"},addUser:{name:"addUser",header:"Add User",buttonLabel:"Add",url:"iso_user_group_add_user_template.html"}},$scope.currentAction={},$scope.newGroupInfo={},$scope.newGroupUpdateTemplate={ISENABLE:1},$scope.newGroupItemInfo={},$scope.newGroupItemInfoTemplate={ISENABLE:1},$scope.showActionContentPopup=function(action){switch(action){case $scope.actions.editGroup.name:$scope.currentAction=$scope.actions.editGroup;break;case $scope.actions.addGroup.name:$scope.currentAction=$scope.actions.addGroup,$scope.newGroupInfo=angular.copy($scope.newGroupUpdateTemplate);break;case $scope.actions.editUser.name:$scope.currentAction=$scope.actions.editUser;break;case $scope.actions.addUser.name:$scope.currentAction=$scope.actions.addUser,$scope.newGroupItemInfo=angular.copy($scope.newGroupItemInfoTemplate)}$("#iso-user-group-content-popup").modal({show:!0,backdrop:"static"})},$scope.selectedGroup={},$scope.groupUpdateInfo={},$scope.setSelectedGroup=function(group){$scope.selectedGroup=group,$scope.groupUpdateInfo=angular.copy($scope.selectedGroup)},$scope.updateGroupInfo=function(){isoService.isoUserGroup.updateGroupInfo($scope.groupUpdateInfo).then(function(data){"success"==data.status?(isoMsg.popup("ISO User Groups",isoConst.msgPopupType.success,"Update success!"),$scope.selectedGroup.GROUP_NAME=data.data.GROUP_NAME,$scope.selectedGroup.ISENABLE=data.data.ISENABLE,1==$scope.groupUpdateInfo.ISENABLE?isoService.treeUser.enablePermissionOfGroup($scope.selectedGroup.GROUP_ID).then(function(data){},function(err){}):isoService.treeUser.disablePermissionOfGroup($scope.selectedGroup.GROUP_ID).then(function(data){},function(err){})):isoMsg.popup("ISO User Groups",isoConst.msgPopupType.error,"Update fail!")},function(err){isoMsg.popup("ISO User Groups",isoConst.msgPopupType.error,"Update fail!")}).then(function(){$scope.groupUpdateInfo={},$("#iso-user-group-content-popup").modal("hide")})},$scope.addGroup=function(){isoService.isoUserGroup.addGroup($scope.newGroupInfo).then(function(data){"success"==data.status?(isoMsg.popup("ISO User Groups",isoConst.msgPopupType.success,"Add success!"),$scope.userGroupList.push(data.data),$scope.selectedGroup=$scope.userGroupList[$scope.userGroupList.length-1]):isoMsg.popup("ISO User Groups",isoConst.msgPopupType.error,"Add fail!")},function(err){isoMsg.popup("ISO User Groups",isoConst.msgPopupType.error,"Add fail!")}).then(function(){$scope.newGroupInfo=angular.copy($scope.newGroupUpdateTemplate),$("#iso-user-group-content-popup").modal("hide")})},$scope.getUserInGroup=function(groupId){isoService.isoUserGroup.getUsersInGroup(groupId).then(function(data){$scope.userList="success"==data.status?data.data:[]},function(err){$scope.userList=[]})},$scope.$watchCollection("selectedGroup",function(oldValues,newValues){$scope.selectedGroup&&$scope.getUserInGroup($scope.selectedGroup.GROUP_ID)}),$scope.selectedGroupItem={},$scope.groupItemUpdateInfo={},$scope.setSelectedGroupItem=function(user){$scope.selectedGroupItem=user,$scope.groupItemUpdateInfo=angular.copy($scope.selectedGroupItem),$scope.groupItemUpdateInfo.NEW_USER_ID=$scope.selectedGroupItem.USER_ID},$scope.showSelectionUser=!1,$scope.newUserSelected={},$scope.$watchCollection("newUserSelected",function(newValues,oldValues){$scope.newUserSelected&&$scope.newUserSelected.id&&($scope.groupItemUpdateInfo.NEW_USER_ID=$scope.newUserSelected.id,$scope.groupItemUpdateInfo.user_name=$scope.newUserSelected.user_name)}),$scope.grantPermissionForUserInGroup=function(groupId,userId){isoService.treeUser.grantPermissionForUserInGroup(groupId,userId).then(function(data){"success"==data.status||"fail"==data.status},function(err){})},$scope.removeAllPermissionOfUserInGroup=function(groupId,userId){isoService.treeUser.removeAllPermissionOfUserInGroup(groupId,userId).then(function(data){"success"==data.status},function(err){})},$scope.updateGroupItemInfo=function(){isoService.isoUserGroup.updateGroupItemInfo($scope.groupItemUpdateInfo).then(function(data){"success"==data.status?(isoMsg.popup("ISO User Groups",isoConst.msgPopupType.success,"Update success!"),$scope.selectedGroupItem.USER_ID=data.data.USER_ID,$scope.selectedGroupItem.user_name=data.data.user_name,$scope.selectedGroupItem.ISENABLE=data.data.ISENABLE,$scope.groupItemUpdateInfo.USER_ID!=$scope.groupItemUpdateInfo.NEW_USER_ID?1==$scope.groupItemUpdateInfo.ISENABLE?($scope.removeAllPermissionOfUserInGroup($scope.groupItemUpdateInfo.GROUP_ID,$scope.groupItemUpdateInfo.USER_ID),
$scope.grantPermissionForUserInGroup($scope.groupItemUpdateInfo.GROUP_ID,$scope.groupItemUpdateInfo.NEW_USER_ID)):($scope.removeAllPermissionOfUserInGroup($scope.groupItemUpdateInfo.GROUP_ID,$scope.groupItemUpdateInfo.USER_ID),$scope.removeAllPermissionOfUserInGroup($scope.groupItemUpdateInfo.GROUP_ID,$scope.groupItemUpdateInfo.NEW_USER_ID)):1==$scope.groupItemUpdateInfo.ISENABLE?$scope.grantPermissionForUserInGroup($scope.groupItemUpdateInfo.GROUP_ID,$scope.groupItemUpdateInfo.USER_ID):$scope.removeAllPermissionOfUserInGroup($scope.groupItemUpdateInfo.GROUP_ID,$scope.groupItemUpdateInfo.USER_ID)):isoMsg.popup("ISO User Groups",isoConst.msgPopupType.error,"Add fail!")},function(err){isoMsg.popup("ISO User Groups",isoConst.msgPopupType.error,"Add fail!")}).then(function(){$scope.groupItemUpdateInfo={},$("#iso-user-group-content-popup").modal("hide")})},$scope.showSelectionUserForItem=!1,$scope.newUserSelectedForItem={},$scope.$watchCollection("newUserSelectedForItem",function(newValues,oldValues){$scope.newUserSelectedForItem&&$scope.newUserSelectedForItem.id&&($scope.newGroupItemInfo.USER_ID=$scope.newUserSelectedForItem.id,$scope.newGroupItemInfo.user_name=$scope.newUserSelectedForItem.user_name,$scope.newGroupItemInfo.GROUP_ID=$scope.selectedGroup.GROUP_ID)}),$scope.addGroupItem=function(){isoService.isoUserGroup.addGroupItem($scope.newGroupItemInfo).then(function(data){"success"==data.status?(isoMsg.popup("ISO User Groups",isoConst.msgPopupType.success,"Add success!"),$scope.userList.push(data.data),$scope.selectedGroupItem=$scope.userList[$scope.userList.length-1],$scope.grantPermissionForUserInGroup($scope.newGroupItemInfo.GROUP_ID,$scope.newGroupItemInfo.USER_ID)):isoMsg.popup("ISO User Groups",isoConst.msgPopupType.error,"Add fail!")},function(err){isoMsg.popup("ISO User Groups",isoConst.msgPopupType.error,"Add fail!")}).then(function(){$scope.newGroupItemInfo=angular.copy($scope.newGroupItemInfoTemplate),$("#iso-user-group-content-popup").modal("hide")})},$scope.deleteGroupItem=function(item){isoService.isoUserGroup.deleteGroupItem(item.GROUP_ID,item.USER_ID).then(function(data){"success"==data.status&&data.info>0?(isoMsg.popup("ISO User Groups",isoConst.msgPopupType.success,"Delete success!"),$scope.getUserInGroup($scope.selectedGroup.GROUP_ID),$scope.removeAllPermissionOfUserInGroup($scope.groupItemUpdateInfo.GROUP_ID,$scope.groupItemUpdateInfo.USER_ID)):isoMsg.popup("ISO User Groups",isoConst.msgPopupType.error,"Delete fail!")},function(err){isoMsg.popup("ISO User Groups",isoConst.msgPopupType.error,"Delete fail!")})}}),angular.module("app.loggedIn.iso.isoApproverListController.controller",[]).controller("isoApproverListController",function($scope,$http,$state,$window,$cookieStore,toastr,isoService){isoTest||isoService.isoAdmin.checkIsAdminIsoSystem().then(function(data){"success"!=data.status&&$state.go("loggedIn.iso.main")},function(err){$state.go("loggedIn.iso.main")});var msgPopup=isoMsg.popup;$scope.approverList={},$scope.getApproverList=function(){isoService.isoApprover.getApproverList().then(function(data){"success"==data.status&&($scope.approverList=data.data)})},$scope.getApproverList(),$scope.addNewUserToApproverList=function(){$("#iso-approver-list-popup").modal({show:!0,backdrop:"static"}),$scope.showSelectionAdminUserName=!0},$scope.showSelectionAdminUserName=!1,$scope.newAdminUserName={},$scope.$watchCollection("newAdminUserName",function(newval,oldval){$scope.newAdminUserName&&$scope.newAdminUserName.user_name&&isoService.isoApprover.insertNewUserToApprover(newval.id).then(function(data){"success"==data.status?(msgPopup("Add New User To Approver",isoConst.msgPopupType.success,"Add New User Success"),$scope.getApproverList()):msgPopup("Add New User To Approver",isoConst.msgPopupType.error,"Add New User Error"),$("#iso-approver-list-popup").modal("hide")})}),$scope.changeEnable=function(id,enable){isoService.isoApprover.updateEnableApprover(id,enable).then(function(data){"success"==data.status?msgPopup("Update Enable Approver",isoConst.msgPopupType.success,"Update Enable Approver Success"):msgPopup("Update Enable Approver",isoConst.msgPopupType.error,"Update Enable Approver Error")})}}),angular.module("app.loggedIn.iso.isoAdminController.controller",[]).controller("isoAdminController",function($scope,$http,$state,$window,$cookieStore,toastr,isoService){var msgPopup=isoMsg.popup;$scope.userName=$cookieStore.get("userInfo").user_name,console.log($scope.userName),$scope.adminList={},$scope.getAdminList=function(){isoService.isoAdmin.getAdminList().then(function(data){"success"==data.status&&($scope.adminList=data.data)})},$scope.getAdminList(),$scope.newAdminUserName={},$scope.addNewUserToAdminList=function(){$("#iso-admin-insert-list-popup").modal({show:!0,backdrop:"static"}),$scope.newAdminUserName={},$scope.role=null},$scope.addAdmin=function(id,role){console.log(id),console.log(role),id&&role?(console.log("aaaaaaaaaa"),isoService.isoAdmin.insertNewUserToAdmin(id,role).then(function(data){"success"==data.status?(msgPopup("Add New User To Admin",isoConst.msgPopupType.success,"Add New User Success"),$scope.getAdminList()):msgPopup("Add New User To Admin",isoConst.msgPopupType.error,"Add New User Error"),$("#iso-admin-insert-list-popup").modal("hide")})):(msgPopup("Add New User To Admin",isoConst.msgPopupType.error,"Add New User Error"),$("#iso-admin-insert-list-popup").modal("hide"))},$scope.editAdmin=function(info){console.log(info),console.log(info.ISENABLE),$scope.newAdminUserName.user_name=info.user_name,$scope.idAdmin=info.ADMIN_ID,$scope.roleAdmin=info.ROLE,$scope.enableAdmin=info.ISENABLE,console.log($scope.idAdmin),$("#iso-admin-edit-list-popup").modal({show:!0,backdrop:"static"})},$scope.updateAdmin=function(adId,idAdminNew,adRole,adEnable){console.log(adId),console.log(adRole),console.log(adEnable),$scope.enableAdmin=adEnable,adId&&adRole?isoService.isoAdmin.updateEnableAdmin(adId,idAdminNew,adRole,adEnable).then(function(data){"success"==data.status?(console.log("okokokok"),$("#iso-admin-edit-list-popup").modal("hide"),msgPopup("Edit User To Admin",isoConst.msgPopupType.success,"Edit User Success"),$scope.getAdminList()):msgPopup("Edit User To Admin",isoConst.msgPopupType.error,"Edit User Error"),$("#iso-admin-edit-list-popup").modal("hide"),$scope.newAdminUserName={}}):(msgPopup("EDit User To Admin",isoConst.msgPopupType.error,"Add New User Error"),$("#iso-admin-edit-list-popup").modal("hide"))},$scope.deleteAdmin=function(id){isoService.isoAdmin.deleteAdminUser(id).then(function(data){"success"==data.status&&$scope.getAdminList()})}}),angular.module("app.loggedIn.iso.service",[]).factory("isoService",function(Restangular,$http,$q,$window){var isoService={},api=Restangular.all("api");return isoService.core={getCountUserName:function(userNameKey){var result=api.one("iso/core/get-count-user-name");return result.get({userNameKey:userNameKey})},getUserNameList:function(userNameKey,pageIndex,itemsPerPage){var result=api.one("iso/core/get-user-name-list");return result.get({userNameKey:userNameKey,pageIndex:pageIndex,itemsPerPage:itemsPerPage})},gerUsersInPermissionGroup:function(nodeId,groupValue){var result=api.all("iso/core/get-users-in-permission-group");return result.post({nodeId:nodeId,groupValue:groupValue})},getDepartmentList:function(){var result=api.one("iso/core/get-department-list");return result.get()}},isoService.treeDir={getTreeDir:function(accessibleUserId,isIsoAdmin){var result=api.all("iso/iso-tree-dir/get-tree-dir");return result.post({accessibleUserId:accessibleUserId,isIsoAdmin:isIsoAdmin})},createFolder:function(nodeId,newFolder){var result=api.all("iso/iso-tree-dir/create-folder");return result.post({nodeId:nodeId,info:newFolder})},checkDupEntry:function(fatherNodeId,nodeName,docCode){var result=api.all("iso/iso-tree-dir/check-dup-entry");return result.post({fatherNodeId:fatherNodeId,nodeName:nodeName,docCode:docCode})},deleteNode:function(nodeId){var result=api.all("iso/iso-tree-dir/delete-node");return result.post({nodeId:nodeId})},restoreNode:function(nodeId){var result=api.all("iso/iso-tree-dir/restore-node");return result.post({nodeId:nodeId})},handlingCloneFolder:function(nodeId,listNode){var result=api.all("iso/iso-tree-dir/handling-clone-folder");return result.post({nodeId:nodeId,listNode:listNode})},cloneFolder:function(nodeId,downloadPackName){$window.location.href="/api/iso/iso-tree-dir/clone-folder?downloadPackName="+downloadPackName+"&nodeId="+nodeId},getFullVersionDoccument:function(nodeId){var result=api.all("iso/iso-tree-dir/getFullVersionDoccument");return result.post({nodeId:nodeId})},getFullCheckinDoccument:function(nodeId){var result=api.all("iso/iso-tree-dir/getFullCheckinDoccument");return result.post({nodeId:nodeId})},selectDocument:function(nodeId){var result=api.all("iso/iso-tree-dir/select-document-info");return result.post({nodeId:nodeId})},handlingDownloadVersionDocument:function(FILE_NAME,CHECK_IN_FOLDER_STORAGE,nodeId){$window.location.href="/api/iso/iso-tree-dir/handlingDownloadVersionDocument?nodeId="+nodeId+"&FILE_NAME="+FILE_NAME+"&CHECK_IN_FOLDER_STORAGE="+CHECK_IN_FOLDER_STORAGE},sendRequestEditDocument:function(userRequestInfo){var result=api.all("iso/iso-tree-dir/send-request-to-edit-document");return result.post({userRequestInfo:userRequestInfo})},renameNode:function(nodeId,oldName,newName){var result=api.all("iso/iso-tree-dir/rename-node");return result.post({nodeId:nodeId,oldName:oldName,newName:newName})},deleteNodeForever:function(nodeId){var result=api.all("iso/iso-tree-dir/delete-node-forever");return result.post({nodeId:nodeId})},deleteNodeForever:function(nodeId){var result=api.all("iso/iso-tree-dir/delete-node-forever");return result.post({nodeId:nodeId})}},isoService.treeUser={grantNodePermission:function(nodeId,accessibleUserId,permission){var result=api.all("iso/iso-tree-users/grant-node-permission");return result.post({nodeId:nodeId,accessibleUserId:accessibleUserId,permission:permission})},checkCanPermission:function(nodeId,userIsGranted,permission){var result=api.all("iso/iso-tree-users/check-can-permission");return result.post({nodeId:nodeId,userIsGranted:userIsGranted,permission:permission})},grantGroupUserPermission:function(nodeId,groupId,permission){var result=api.all("iso/iso-tree-users/grant-user-group-permission");return result.post({nodeId:nodeId,groupId:groupId,permission:permission})},grantPermissionForUserInGroup:function(groupId,userIsGrantedId){var result=api.all("iso/iso-tree-users/grant-permission-for-user-in-group");return result.post({groupId:groupId,userIsGrantedId:userIsGrantedId})},removeAllPermissionOfUserInGroup:function(groupId,userIsGrantedId){var result=api.all("iso/iso-tree-users/remove-all-permission-of-user-of-group");return result.post({userIsGrantedId:userIsGrantedId,groupId:groupId})},disablePermissionOfGroup:function(groupId){var result=api.all("iso/iso-tree-users/disable-permission-of-group");return result.post({groupId:groupId})},enablePermissionOfGroup:function(groupId){var result=api.all("iso/iso-tree-users/enable-permission-of-group");return result.post({groupId:groupId})}},isoService.checkOutIn={checkOutDocument:function(nodeId,relativePath){var result=api.all("iso/iso-check-out-in/check-out-document");return result.post({nodeId:nodeId,relativePath:relativePath})},canCheckInDocument:function(nodeId){var result=api.one("iso/iso-check-out-in/can-check-in-document");return result.get({nodeId:nodeId})},selectIdFromCheckOutIn:function(NODE_ID){var result=api.one("iso/iso-check-out-in/selectIdFromCheckOutIn");return result.get({NODE_ID:NODE_ID})},submitDocument:function(nodeId){var result=api.all("iso/iso-check-out-in/submit-document");return result.post({nodeId:nodeId})},cancelSubmitDocument:function(nodeId){var result=api.all("iso/iso-check-out-in/cancel-submit-document");return result.post({nodeId:nodeId})},checkCanAccessApprovalPage:function(){var result=api.one("iso/iso-check-out-in/access-approval-page");return result.get()},getAllOutInStatusPending:function(pageIndex,itemsPerPage){var result=api.one("iso/iso-check-out-in/getAllOutInStatusPending");return result.get({pageIndex:pageIndex,itemsPerPage:itemsPerPage})},approvedDocument:function(nodeId,checkOutInId){var result=api.all("iso/iso-check-out-in/approved-document");return result.post({nodeId:nodeId,checkOutInId:checkOutInId})},rejectedDocument:function(checkOutInId){var result=api.all("iso/iso-check-out-in/rejected-document");return result.post({checkOutInId:checkOutInId})},approvedAndReject:function(info){var result=api.all("iso/iso-check-out-in/approvedAndReject");return result.post({data:info})},dowloadFile:function(nodeId,checkOutInId){$window.location.href="/api/iso/iso-check-out-in/downloadFileCheckOutIn?nodeId="+nodeId+"&checkOutInId="+checkOutInId},downloadNewestVersionDocument:function(Node_ID){$window.location.href="/api/iso/iso-check-out-in/downloadNewestVersionDocument?nodeId="+Node_ID},countOutIn:function(){var result=api.one("iso/iso-check-out-in/countOutInStatusPending");return result.get()},sendEmailNotificationNewDocumentVersion:function(nodeId){var result=api.all("iso/iso-check-out-in/send-email-all-user-document-release");return result.post({nodeId:nodeId})},makeCurrentVersion:function(nodeId,checkOutInId){var result=api.all("iso/iso-check-out-in/make-current-version");return result.post({nodeId:nodeId,checkOutInId:checkOutInId})},forceSubmitDocument:function(nodeId){var result=api.all("iso/iso-check-out-in/force-submit-document");return result.post({nodeId:nodeId})},forceApprovedDocument:function(nodeId,checkOutInId){var result=api.all("iso/iso-check-out-in/force-approved-document");return result.post({nodeId:nodeId,checkOutInId:checkOutInId})},forceCheckOutDocument:function(nodeId,checkOutInId){var result=api.all("iso/iso-check-out-in/force-check-out-document");return result.post({nodeId:nodeId,checkOutInId:checkOutInId})},downloadSpecificCheckIn:function(nodeId,checkOutInId){$window.location.href="/api/iso/iso-check-out-in/download-specific-check-in?nodeId="+nodeId+"&checkOutInId="+checkOutInId}},isoService.isoAdmin={checkIsAdminIsoSystemMaster:function(){var result=api.all("iso/iso-admin/check-is-admin-iso-system-master");return result.post()},checkIsAdminIsoSystem:function(){var result=api.all("iso/iso-admin/check-is-admin-iso-system");return result.post()},getAdminList:function(){var result=api.one("iso/iso-admin/getAdminList");return result.get()},insertNewUserToAdmin:function(id,role){var result=api.all("iso/iso-admin/insertNewUserToAdmin");return result.post({id:id,role:role})},updateEnableAdmin:function(id,idnew,role,enable){var result=api.all("iso/iso-admin/updateEnableAdmin");return result.post({id:id,idnew:idnew,role:role,enable:enable})},deleteAdminUser:function(id){var result=api.all("iso/iso-admin/deleteAdmin");return result.post({id:id})}},isoService.isoUserGroup={checkCanAccessUserGroupPage:function(){var result=api.one("iso/iso-user-group/access-user-group-page");return result.get()},getUserGroupList:function(){var result=api.one("iso/iso-user-group/get-user-group-list");return result.get()},updateGroupInfo:function(groupInfo){var result=api.all("iso/iso-user-group/update-group-info");return result.post({groupInfo:groupInfo})},addGroup:function(groupInfo){var result=api.all("iso/iso-user-group/add-group");return result.post({groupInfo:groupInfo})},getUsersInGroup:function(groupId){var result=api.all("iso/iso-user-group/get-user-in-group");return result.post({groupId:groupId})},updateGroupItemInfo:function(groupItemInfo){var result=api.all("iso/iso-user-group/update-group-item-info");return result.post({groupItemInfo:groupItemInfo})},addGroupItem:function(groupItemInfo){var result=api.all("iso/iso-user-group/add-group-item");return result.post({groupItemInfo:groupItemInfo})},deleteGroupItem:function(groupId,itemId){var result=api.all("iso/iso-user-group/delete-group-item");return result.post({groupId:groupId,itemId:itemId})}},isoService.isoApprover={getApproverList:function(){var result=api.one("iso/iso-approver/getApproverList");return result.get()},insertNewUserToApprover:function(id){var result=api.all("iso/iso-approver/insertNewUserToApprover");return result.post({id:id})},updateEnableApprover:function(id,enable){var result=api.all("iso/iso-approver/updateEnableApprover");return result.post({id:id,enable:enable})},checkIsIsoApprover:function(){var result=api.one("iso/iso-approver/check-is-iso-approver");return result.get()}},isoService.hierarchyApproval={addHierarchyApprovalHeader:function(isoNodeId){var result=api.all("iso/iso-hierarchy-approval/add-hierarchy-approval-header");return result.post({isoNodeId:isoNodeId})},approval:function(approvalInfo){var result=api.all("iso/iso-hierarchy-approval/approval");return result.post({approvalInfo:approvalInfo})},getAllHierarchyLineForUser:function(){var result=api.one("iso/iso-hierarchy-approval/get-all-hierarchy-line-for-user");return result.get()},downloadFileCheckOutIn:function(nodeId,checkOutInId){$window.location.href="/api/iso/iso-hierarchy-approval/download-file-check-out-in?nodeId="+nodeId+"&checkOutInId="+checkOutInId},sendEmailNotificationApprovalToNextNode:function(hierarchyLineId,hierarchyNodeId,isoNodeId,checkOutInId){var result=api.all("iso/iso-hierarchy-approval/send-email-notification-approval-to-next-node");return result.post({hierarchyLineId:hierarchyLineId,hierarchyNodeId:hierarchyNodeId,isoNodeId:isoNodeId,checkOutInId:checkOutInId})}},isoService.requestEdit={getAllRequestOfUserLogin:function(nodeId){var result=api.all("iso/iso-request-edit-document/get-all-request-of-user-login");return result.post({nodeId:nodeId})},cancelRequest:function(requestId){var result=api.all("iso/iso-request-edit-document/cancel-request");return result.post({requestId:requestId})},getAllRequest:function(nodeId){var result=api.all("iso/iso-request-edit-document/get-all-request");return result.post({nodeId:nodeId})},setRequestIsRead:function(requestId){var result=api.all("iso/iso-request-edit-document/set-request-is-read");return result.post({requestId:requestId})},setRequestStar:function(requestId,star){var result=api.all("iso/iso-request-edit-document/set-request-star");return result.post({requestId:requestId,star:star})},getNumberOfRequestUnread:function(nodeId){var result=api.one("iso/iso-request-edit-document/get-number-of-request-unread");return result.get({nodeId:nodeId})}},isoService.replyEdit={insertReplyEditDocument:function(IDREQUEST,DESCRIPTION){var result=api.all("iso/iso-reply-edit-document/insert-iso-reply-edit-document");return result.post({IDREQUEST:IDREQUEST,DESCRIPTION:DESCRIPTION})},getAllReplyEditDocument:function(IDREQUEST){var result=api.all("iso/iso-reply-edit-document/get-list-iso-reply-edit-document");return result.post({IDREQUEST:IDREQUEST})},updateAdminReply:function(ID,VALUE){var result=api.all("iso/iso-reply-edit-document/update-admin-reply");return result.post({ID:ID,VALUE:VALUE})},updateStaffReply:function(ID,VALUE){var result=api.all("iso/iso-reply-edit-document/updete-staff-reply");return result.post({ID:ID,VALUE:VALUE})},getNumberStaffReplyOfRequest:function(nodeId){var result=api.one("iso/iso-reply-edit-document/get-number-staff-reply-of-request");return result.get({nodeId:nodeId})},getNumberAdminReplyOfRequest:function(nodeId){var result=api.one("iso/iso-reply-edit-document/get-number-admin-reply-of-request");return result.get({nodeId:nodeId})},getHaveNewReply:function(ID){var result=api.one("iso/iso-reply-edit-document/get-have-new-reply");return result.get({ID:ID})}},isoService});