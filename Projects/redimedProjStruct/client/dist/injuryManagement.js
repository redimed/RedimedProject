angular.module("app.loggedIn.patient.injuryManagement",["app.loggedIn.patient.injuryManagement.map.controller","app.loggedIn.patient.injuryManagement.detail.controller","app.loggedIn.patient.injuryManagement.list.controller","app.loggedIn.patient.injuryManagement.bluetooth.controller","app.loggedIn.patient.injuryManagement.services"]).config(function($stateProvider){$stateProvider.state("loggedIn.patient.im_Map",{url:"/im/maps",views:{"main-content":{templateUrl:"modules/injuryManagement/views/injuryMap.html",controller:"InjuryMapController"}}}).state("loggedIn.patient.im_List",{url:"/im/list",views:{"main-content":{templateUrl:"modules/injuryManagement/views/injuryList.html",controller:"InjuryListController"}}}).state("loggedIn.patient.im_Bluetooth",{url:"/im/bluetooth",views:{"main-content":{templateUrl:"modules/injuryManagement/views/bluetooth.html",controller:"BluetoothController"}}}).state("loggedIn.patient.im_Detail",{url:"/im/details/:id",views:{"main-content":{templateUrl:"modules/injuryManagement/views/injuryDetails.html",controller:"InjuryDetailController"}}})}),angular.module("app.loggedIn.patient.injuryManagement.map.controller",[]).controller("InjuryMapController",function($scope,$filter,$state,InjuryManagementService,UserService,toastr,socket,$interval,$modal,$modalInstance){function refreshMap(){$scope.injuryMarker=[],InjuryManagementService.getInjuryList().then(function(rs){if("success"==rs.status)for(var i=0;i<rs.data.length;i++)if(1==rs.data[i].isPickUp&&("New"==rs.data[i].STATUS||"Picking"==rs.data[i].STATUS||"Picked"==rs.data[i].STATUS)){var icon,patient=rs.data[i],positionArr=[];null!=patient.latitude&&positionArr.push(patient.latitude),null!=patient.longitude&&positionArr.push(patient.longitude),"Picking"==patient.STATUS||"Picked"==patient.STATUS?icon="modules/injuryManagement/icons/icon-orange.png":"New"==patient.STATUS&&(icon="modules/injuryManagement/icons/icon-blue.png"),$scope.patientData={id:patient.injury_id,patientId:patient.Patient_id,position:positionArr,pickupAddr:patient.pickup_address,FullName:patient.FullName,gender:patient.Sex,injuryDesc:patient.injury_description,status:patient.STATUS,icon:icon,driverUser:patient.driverUser,driverName:patient.driverName},$scope.injuryMarker.push($scope.patientData)}})}$scope.injuryMarker=[],$scope.driverMarker=[],$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.selectedDriver={driverId:null},refreshMap(),socket.on("driverLocation",function(driverArr){if($scope.driverMarker=[],driverArr.length>0)for(var icon="modules/injuryManagement/icons/ambulance.png",i=0;i<driverArr.length;i++){var driver=driverArr[i];if($scope.driverData={driverId:driver.id,position:[driver.latitude,driver.longitude],username:driver.userName,icon:icon,patientList:driver.patientList},$scope.driverMarker.length>0){var index=_.findIndex($scope.driverMarker,{driverId:driver.id});-1==index?$scope.driverMarker.push($scope.driverData):($scope.driverMarker[index].position=$scope.driverData.position,$scope.driverMarker[index].patientList=$scope.driverData.patientList)}else $scope.driverMarker.push($scope.driverData);console.log("====Driver Marker====: ",$scope.driverMarker)}}),$scope.showDetails=function(id){InjuryManagementService.getInjuryById(id).then(function(rs){"success"==rs.status&&$modal.open({templateUrl:"modules/consultation/dialogs/dialog_injury_details.html",size:"md",resolve:{injuryInfo:function(){return rs.data}},controller:function($scope,$modalInstance,$stateParams,injuryInfo,InjuryManagementService){if($scope.info=injuryInfo,$scope.loadedImage=!1,$scope.injuryImages=[],$scope.imgArr=[],$scope.info.injury_date=moment.utc($scope.info.injury_date).format("DD/MM/YYYY - hh:mm:ss"),"undefined"!=typeof injuryInfo.injuryImg&&injuryInfo.injuryImg.length>0){$scope.loadedImage=!0;for(var i=0;i<injuryInfo.injuryImg.length;i++)$scope.imgArr.push({url:location.origin+"/api/im/image/"+injuryInfo.injuryImg[i].id,img:injuryInfo.injuryImg[i]})}$scope.cancelClick=function(){$modalInstance.close()},$scope.viewImage=function(img){$modal.open({templateUrl:"modules/injuryManagement/views/imageModal.html",size:"md",resolve:{imgObj:function(){return img}},controller:function($scope,$state,$modalInstance,UserService,socket,toastr,imgObj){$scope.img={image:location.origin+"/api/im/image/"+imgObj.id,description:imgObj.desc}}})}}})})},$scope.allocateDriver=function(injury){InjuryManagementService.allocateDriver($scope.selectedDriver.driverId,injury.patientId,injury.id).then(function(rs){"error"==rs.status?toastr.error("Send Notification Failed!","Error"):(toastr.success("Send Notification Successfully!","Success"),$scope.selectedDriver.driverId=null,refreshMap())})},$scope.refreshMap=function(){refreshMap()},setInterval(refreshMap,6e4)}),angular.module("app.loggedIn.patient.injuryManagement.list.controller",[]).controller("InjuryListController",function($scope,$filter,$state,InjuryManagementService,UserService,toastr,socket,$stateParams,$cookieStore){function refreshList(){$scope.search.driver="",$scope.search.dateRange=null,$scope.injuryList=[],$scope.injuryListTemp=[],InjuryManagementService.getInjuryListByPatient($scope.patient_id).then(function(rs){if("success"==rs.status)if(rs.data.length>0){$scope.haveData=!0;for(var j=0;j<rs.data.length;j++)(null==rs.data[j].driverUser||"undefined"==typeof rs.data[j].driverUser)&&(rs.data[j].driverUser="");$scope.injuryListTemp=rs.data,$scope.injuryList=$scope.injuryListTemp}else $scope.haveData=!1;else $scope.haveData=!1})}function filterDate(from,to){$scope.injuryList=[],$scope.injuryListTemp=[],InjuryManagementService.searchByDatePatient(from,to,$scope.patient_id).then(function(rs){if("success"==rs.status){for(var j=0;j<rs.data.length;j++)(null==rs.data[j].driverUser||"undefined"==typeof rs.data[j].driverUser)&&(rs.data[j].driverUser="");$scope.injuryListTemp=rs.data,$scope.injuryList=$scope.injuryListTemp}})}$scope.patient_id=$stateParams.patient_id,$scope.search={driver:"",dateRange:null},$scope.haveData=!1;var from=$cookieStore.get("fromState"),params={};(null!=from.fromParams||"undefined"!=typeof from.fromParams)&&angular.forEach(from.fromParams,function(value,key){params[key]=value}),$scope.goBack=function(){$state.go(from.fromState.name,params,{location:"replace",reload:!0})},$scope.refreshList=function(){refreshList()},$scope.showDetails=function(id){$state.go("loggedIn.patient.im_Detail",{id:id})},$scope.searchInjury=function(s){$scope.injuryList=$filter("filter")($scope.injuryListTemp,{driverUser:s.driver})},$scope.getDateRange=function(range){filterDate($filter("date")(range.start.toDate(),"yyyy-MM-dd"),$filter("date")(range.end.toDate(),"yyyy-MM-dd")),$scope.search.patient="",$scope.search.driver=""},InjuryManagementService.getInjuryListByPatient($scope.patient_id).then(function(rs){if("success"==rs.status)if(rs.data.length>0){$scope.haveData=!0;for(var j=0;j<rs.data.length;j++)(null==rs.data[j].driverUser||"undefined"==typeof rs.data[j].driverUser)&&(rs.data[j].driverUser="");$scope.injuryListTemp=rs.data,$scope.injuryList=$scope.injuryListTemp}else $scope.haveData=!1;else $scope.haveData=!1})}),angular.module("app.loggedIn.patient.injuryManagement.detail.controller",[]).controller("InjuryDetailController",function($scope,$http,$modal,$filter,$state,$stateParams,InjuryManagementService,toastr){$scope.injuryInfo={},$scope.injuryImages=[],$scope.loadedImage=!1,$scope.imgArr=[],InjuryManagementService.getInjuryById(injuryId).then(function(rs){if("success"==rs.status&&($scope.injuryInfo=rs.data[0],$scope.injuryInfo.injuryImg.length>0)){$scope.loadedImage=!0;for(var i=0;i<$scope.injuryInfo.injuryImg.length;i++)$scope.imgArr.push({url:location.origin+"/api/im/image/"+$scope.injuryInfo.injuryImg[i].id,img:$scope.injuryInfo.injuryImg[i]})}}),$scope.viewImage=function(img){$modal.open({templateUrl:"modules/injuryManagement/views/imageModal.html",size:"md",resolve:{imgObj:function(){return img}},controller:function($scope,$state,$modalInstance,UserService,socket,toastr,imgObj){$scope.img={image:location.origin+"/api/im/image/"+imgObj.id,description:imgObj.desc}}})}}),angular.module("app.loggedIn.patient.injuryManagement.bluetooth.controller",[]).controller("BluetoothController",function($scope,$filter,$state,InjuryManagementService,UserService,toastr,socket,$stateParams,$cookieStore,ngTableParams){$scope.patient_id=$stateParams.patient_id,$scope.deviceList=[];var colors=["blue-soft","red-soft","purple-soft","green-soft"],icons=["fa fa-plus-square","fa fa-medkit","fa fa-heart","fa fa-stethoscope"];$scope.haveData=!1,$scope.currDevice=null,$scope.chartData=[],socket.on("getMeasureData",function(rs){if(rs.info){var data=angular.copy(rs.info);delete data.deviceType,delete data.rawData,$scope.$apply(function(){$scope.onlineDevice=rs.info.deviceType,$scope.onlineData=data})}}),InjuryManagementService.getMedicalDevices().then(function(rs){if("success"==rs.status){for(var i=0;i<rs.data.length;i++)rs.data[i].color=colors[Math.floor(Math.random()*colors.length)],rs.data[i].icon=icons[Math.floor(Math.random()*icons.length)];$scope.deviceList=rs.data}}),$scope.updateMeasure=function(measure){var m={};m.notes=measure.notes,InjuryManagementService.editDeviceMeasure(m,measure.measure_id).then(function(rs){"success"==rs.status?toastr.success("Edit Success!"):toastr.error("Edit Failed!")})},$scope.chartOptions={series:{lines:{show:!0},points:{show:!0}},xaxis:{tickLength:0,tickDecimals:0,mode:"categories",min:0,font:{lineHeight:14,style:"normal",variant:"small-caps",color:"#6F7B8A"}},yaxis:{ticks:5,tickDecimals:0,tickColor:"#eee",font:{lineHeight:14,style:"normal",variant:"small-caps",color:"#6F7B8A"}},grid:{hoverable:!0,clickable:!0,tickColor:"#eee",borderColor:"#eee",borderWidth:1}},$scope.changeHistory=function(dateRange){null!=$scope.data&&null!=$scope.currDevice&&getHistory($scope.currDevice.toLowerCase(),_.sortBy($scope.data,"measure_date"),moment(dateRange.start),moment(dateRange.end))},$scope.showHistory=function(device){$scope.data=null,$scope.haveData=!1,$scope.currDevice=device.device_name,InjuryManagementService.getDeviceDataByPatient(device.id,$scope.patient_id).then(function(rs){if("success"==rs.status)if(rs.data.length>0){$scope.haveData=!0;for(var deviceType=null,i=0;i<rs.data.length;i++)(null!=rs.data[i].measureData||""!=rs.data[i].measureData)&&(deviceType=rs.data[0].device_name.toLowerCase(),rs.data[i].jsonData=JSON.parse(rs.data[i].measureData));$scope.data=rs.data,$scope.historyDates=moment().range(moment().subtract(1,"days"),moment()),getHistory(deviceType,_.sortBy($scope.data,"measure_date"),moment().subtract(1,"days"),moment()),null!=$scope.data&&($scope.tableParams=new ngTableParams({page:1,count:10},{total:rs.data.length,getData:function($defer,params){var filteredData=params.filter()?$filter("filter")($scope.data,params.filter()):$scope.data,orderedData=params.sorting()?$filter("orderBy")(filteredData,params.orderBy()):$scope.data;params.total(orderedData.length),$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count()))}}))}else $scope.haveData=!1;else $scope.haveData=!1})};var getHistory=function(deviceType,data,from,to){var fromDate=moment(from).format("YYYY-MM-DD"),toDate=moment(to).format("YYYY-MM-DD"),pulse=[],spO2=[],fev1=[],fvc=[],pef=[],sys=[],dia=[],bpm=[],mmHg=[];$scope.chartData=[];for(var i=0;i<data.length;i++){var measureDate=$filter("date")(data[i].measure_date,"yyyy-MM-dd"),measureDateHrs=$filter("date")(data[i].measure_date,"dd/MM/yyyy-hh:mm a");switch(deviceType){case"pulse oximeter":(moment(measureDate).isBefore(toDate)&&moment(measureDate).isAfter(fromDate)||moment(measureDate).isSame(fromDate)||moment(measureDate).isSame(toDate))&&(pulse.push([measureDateHrs,data[i].jsonData.pulse]),spO2.push([measureDateHrs,data[i].jsonData.spO2]));break;case"spirometer":(moment(measureDate).isBefore(toDate)&&moment(measureDate).isAfter(fromDate)||moment(measureDate).isSame(fromDate)||moment(measureDate).isSame(toDate))&&(fev1.push([measureDateHrs,data[i].jsonData.FEV1]),fvc.push([measureDateHrs,data[i].jsonData.FVC]),pef.push([measureDateHrs,data[i].jsonData.PEF]));break;case"blood pressure":(moment(measureDate).isBefore(toDate)&&moment(measureDate).isAfter(fromDate)||moment(measureDate).isSame(fromDate)||moment(measureDate).isSame(toDate))&&(sys.push([measureDateHrs,data[i].jsonData.sys]),dia.push([measureDateHrs,data[i].jsonData.dia]),bpm.push([measureDateHrs,data[i].jsonData.bpm]),mmHg.push([measureDateHrs,data[i].jsonData.mmHg]))}}switch(deviceType){case"pulse oximeter":$scope.chartData.push({data:pulse,label:"Pulse"}),$scope.chartData.push({data:spO2,label:"SpO2"});break;case"spirometer":$scope.chartData.push({data:fev1,label:"FEV1"}),$scope.chartData.push({data:fvc,label:"FVC"}),$scope.chartData.push({data:pef,label:"PEF"});break;case"blood pressure":$scope.chartData.push({data:sys,label:"SYS"}),$scope.chartData.push({data:dia,label:"DIA"}),$scope.chartData.push({data:bpm,label:"BPM"}),$scope.chartData.push({data:mmHg,label:"mmHg"})}}}),angular.module("app.loggedIn.patient.injuryManagement.services",[]).factory("InjuryManagementService",function(Restangular){var imService={},api=Restangular.all("api");return imService.getInjuryList=function(){return api.one("im/list").get()},imService.getInjuryListByPatient=function(patient_id){return api.all("im/listByPatient").post({patient_id:patient_id})},imService.getInjuryById=function(id){return api.all("im/getById").post({injury_id:id})},imService.getImageByInjury=function(id){return api.all("im/images").post({injury_id:id})},imService.listDriver=function(){return api.one("im/getListDriver").get()},imService.allocateDriver=function(dId,pId,iId){return api.all("im/allocateDriver").post({driverId:dId,patientId:pId,injuryId:iId})},imService.searchByDate=function(from,to){return api.all("im/searchByDate").post({from:from,to:to})},imService.searchByDatePatient=function(from,to,patient_id){return api.all("im/searchByDatePatient").post({from:from,to:to,patient_id:patient_id})},imService.getMedicalDevices=function(){return api.one("im/getDevices").get()},imService.getDeviceDataByPatient=function(id,patientId){return api.all("medicalDevice/getData").post({id:id,patient_id:patientId})},imService.editDeviceMeasure=function(info,id){return api.all("medicalDevice/edit").post({id:id,info:info})},imService});