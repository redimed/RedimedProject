angular.module("app.calling",[]).config(function($stateProvider){$stateProvider.state("test_call",{url:"/testCall/:apiKey/:clientId/:callUser/:isCaller/:patientId",views:{root:{templateUrl:"modules/makeCall/views/call_apiRTC.html",controller:"callControllerApiRTC"}}}).state("make_call",{url:"/makeCall/:apiKey/:sessionId/:token/:callUser/:isCaller/:patientId/:calId",views:{root:{templateUrl:"modules/makeCall/views/call.html",controller:"callController"}}}).state("whiteboard",{url:"/whiteboard/:apiKey/:sessionId/:token/:patientId/:calId",views:{root:{templateUrl:"modules/makeCall/views/whiteboard.html",controller:"whiteboardController"}}})}),angular.module("app.calling").controller("callController",function($timeout,$scope,$document,$modalStack,$interval,$location,$rootScope,OTSession,$state,$modal,$cookieStore,toastr,$window,socket,UserService,$stateParams){function cancelListenerHandler(){console.log("Remove Success")}function disconnect(){0==$scope.streams.length?(socket.emit("sendMessage",$scope.userInfo.id,$stateParams.callUser,{type:"cancel"}),window.close(),null==window.whiteboard_screen&&window.whiteboard_screen.closed||window.whiteboard_screen.close()):UserService.getUserInfo($scope.userInfo.id).then(function(data){var signal={type:"cancelCall",data:data.user_name};OTSession.session.signal(signal,function(err){err?TB.error(err):(window.close(),null==window.whiteboard_screen&&window.whiteboard_screen.closed||window.whiteboard_screen.close())})})}function popup(url){return params="width="+screen.width,params+=", height="+screen.height,params+=", left=0",params+=", top=0",params+=", fullscreen=yes",(null==window.whiteboard_screen||window.whiteboard_screen.closed)&&(window.whiteboard_screen=window.open(url,"RedimedWhiteboard",params),window.whiteboard_screen.focus()),null==window.whiteboard_screen||window.whiteboard_screen.closed||window.open("","RedimedWhiteboard",""),!1}var audio=new Audio("theme/assets/phone_calling.mp3"),params=($cookieStore.get("toState"),{}),apiKey=$stateParams.apiKey,sessionId=$stateParams.sessionId,token=$stateParams.token;$scope.newwin=null,$scope.session=null,$scope.streams=OTSession.streams,$scope.connections=OTSession.connections,$scope.userInfo=null,$scope.callUserInfo=null,$scope.patientId=null!=$stateParams.patientId||void 0!=$stateParams.patientId?$stateParams.patientId:null,$scope.calId=null!=$stateParams.calId||void 0!=$stateParams.calId?$stateParams.calId:null,$scope.isCaller=1==$stateParams.isCaller||"1"==$stateParams.isCaller?!0:!1,$scope.isAccept=!1,UserService.getUserInfo($stateParams.callUser).then(function(data){data.img="theme/assets/icon.png",$scope.callUserInfo=data}),$scope.$on("onUnload",function(e){audio.pause(),disconnect()}),$scope.isAudioMuted=!1,$scope.isVideoMuted=!1,$scope.sharingMyScreen=!1,$scope.publishing=!1,$scope.screenBig=!0,$scope.screenShareSupported=!1,$scope.connected=!1,$scope.screenShareFailed=null,$scope.mouseMove=!1,$scope.selectingScreenSource=!1,$scope.promptToInstall=!1,$scope.showWhiteboard=!1,$scope.showBluetooth=!1,$scope.whiteboardUnread=!1,OT.registerScreenSharingExtension("chrome","pkakgggplhfilfbailbaibljfpalofjn"),OT.checkScreenSharingCapability(function(response){$scope.screenShareSupported=response.supported&&response.extensionRegistered!==!1,$scope.$apply()}),$scope.screenPublisherProps={name:"screen",style:{nameDisplayMode:"off"},publishAudio:!1,maxResolution:{width:1920,height:1080},videoSource:"screen"},$scope.facePublisherProps={name:"face",width:"100%",height:"100%",style:{nameDisplayMode:"off"},resolution:"1280x720",frameRate:30},$scope.notMine=function(stream){return stream.connection.connectionId!==$scope.session.connection.connectionId},null==$cookieStore.get("userInfo")||"undefined"==typeof $cookieStore.get("userInfo")?disconnect():$scope.userInfo=$cookieStore.get("userInfo"),$scope.session&&$scope.session.disconnect(),OTSession.init(apiKey,sessionId,token,function(err,session){$scope.session=session;var connectDisconnect=function(connected){$scope.$apply(function(){$scope.connected=connected,connected||($scope.publishing=!1)})};(session.is&&session.is("connected")||session.connected)&&(connectDisconnect(!0),$scope.publishing=!0),$scope.session.on("sessionConnected",connectDisconnect.bind($scope.session,!0)),$scope.session.on("sessionDisconnected",connectDisconnect.bind($scope.session,!1));var whiteboardUpdated=function(){$scope.showWhiteboard||$scope.whiteboardUnread||$scope.$apply(function(){$scope.whiteboardUnread=!0,$scope.mouseMove=!0})},deviceUpdated=function(){$scope.showBluetooth||$scope.$apply(function(){$scope.mouseMove=!0})};$scope.$on("otWhiteboardUpdate",whiteboardUpdated),$scope.$on("medicalDeviceUpdate",deviceUpdated),$scope.isCaller?(audio.loop=!0,audio.play(),socket.emit("sendMessage",$scope.userInfo.id,$stateParams.callUser,{type:"call",sessionId:sessionId,patientId:$scope.patientId,calId:$scope.calId})):socket.emit("sendMessage",$scope.userInfo.id,$stateParams.callUser,{type:"answer"})}),socket.removeListener("messageReceived",cancelListenerHandler),socket.on("messageReceived",function(fromId,fromUser,message){"answer"===message.type&&(audio.pause(),$scope.isAccept=!0,$modalStack.dismissAll()),"ignore"===message.type&&(toastr.info(fromUser+" Has Ignored The Call!"),0==$scope.streams.length?(audio.pause(),disconnect()):$modalStack.dismissAll()),"cancel"===message.type&&(audio.pause(),toastr.info(fromUser+" Has Left The Call!"),disconnect())}),$scope.muteAudio=function(){$scope.isAudioMuted=!$scope.isAudioMuted},$scope.muteVideo=function(){$scope.isVideoMuted=!$scope.isVideoMuted};$scope.cancelCall=function(){swal({title:"Are you sure want to cancel the call?",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes",closeOnConfirm:!0},function(){audio.pause(),disconnect()})},OTSession.session&&OTSession.session.on({"signal:cancelCall":function(event){toastr.info(event.data+" Has Left The Call!"),$timeout(function(){0==$scope.streams.length&&(window.close(),null==window.whiteboard_screen&&window.whiteboard_screen.closed||window.whiteboard_screen.close())},1500)}}),$scope.installScreenshareExtension=function(){chrome.webstore.install("https://chrome.google.com/webstore/detail/pkakgggplhfilfbailbaibljfpalofjn",function(){console.log("successfully installed")},function(){console.error("failed to install",arguments)})},$scope.toggleWhiteboard=function(){popup($state.href("whiteboard",{apiKey:apiKey,sessionId:sessionId,token:token,patientId:$scope.patientId,calId:$scope.calId}))},$scope.toggleBluetooth=function(){$scope.showBluetooth=!$scope.showBluetooth,setTimeout(function(){$scope.$emit("otLayout")},10)},$scope.toggleShareScreen=function(){$scope.connected&&($scope.sharingMyScreen||$scope.selectingScreenSource?$scope.sharingMyScreen&&($scope.sharingMyScreen=!1):($scope.selectingScreenSource=!0,$scope.screenShareFailed=null,OT.checkScreenSharingCapability(function(response){response.supported&&response.extensionRegistered!==!1?response.extensionInstalled===!1?($scope.promptToInstall=!0,$scope.selectingScreenSource=!1):($scope.sharingMyScreen=!0,$scope.selectingScreenSource=!1):($scope.screenShareSupported=!1,$scope.selectingScreenSource=!1),$scope.$apply()})))},$scope.addPeople=function(){if(console.log($scope.streams),0==$scope.streams.length)toastr.warning("Please Wait For Calling Person First!");else if($scope.streams.length<2&&$scope.streams.length>0){for(var arrUser=[],i=0;i<$scope.streams.length;i++)arrUser.push($scope.streams[i].name);{$modal.open({templateUrl:"modules/makeCall/views/dialogs/invitePeople.html",size:"sm",backdrop:"static",keyboard:!1,resolve:{userInfo:function(){return $scope.userInfo},arrUser:function(){return arrUser},sessionId:function(){return sessionId},OTSession:function(){return OTSession},patientId:function(){return $scope.patientId},calId:function(){return $scope.calId}},controller:function($scope,UserService,$modalInstance,toastr,socket,userInfo,sessionId,OTSession,patientId,arrUser){$scope.isMakeCall=!1,$scope.callUser=null,$scope.userInfo=userInfo,UserService.getOnlineUsers().then(function(rs){$scope.onlineUsers=rs.data}),$scope.cancelCall=function(){socket.emit("sendMessage",userInfo.id,$scope.callUser.id,{type:"cancel"}),$modalInstance.close({type:"cancel"})},$scope.callUser=function(u){$scope.isMakeCall=!0,$scope.callUser=u,socket.emit("sendMessage",userInfo.id,u.id,{type:"call",sessionId:sessionId,patientId:patientId,calId:calId})},$scope.cancelClick=function(){$modalInstance.close({type:"cancel"})}}})}}else toastr.warning("Can Only Make A Group Call With 3 People!")},$scope.$on("changeSize",function(event){event.targetScope.stream.oth_large=void 0===event.targetScope.stream.oth_large?"screen"!==event.targetScope.stream.name:!event.targetScope.stream.oth_large,setTimeout(function(){event.targetScope.$emit("otLayout")},10)}),$scope.$on("changeScreenSize",function(event){$scope.screenBig=!$scope.screenBig,setTimeout(function(){event.targetScope.$emit("otLayout")},10)}),$scope.$on("otPublisherError",function(event,error,publisher){"screenPublisher"===publisher.id&&$scope.$apply(function(){$scope.screenShareFailed=error.message,$scope.toggleShareScreen()})}),$scope.$on("otStreamDestroyed",function(event){"screenPublisher"===event.targetScope.publisher.id&&$scope.$apply(function(){$scope.sharingMyScreen=!1})});var mouseMoveTimeout,mouseMoved=function(event){$scope.mouseMove||$scope.$apply(function(){$scope.mouseMove=!0}),mouseMoveTimeout&&clearTimeout(mouseMoveTimeout),mouseMoveTimeout=setTimeout(function(){$scope.$apply(function(){$scope.mouseMove=!1})},5e3)};$window.addEventListener("mousemove",mouseMoved),$window.addEventListener("touchstart",mouseMoved),$document.context.body.addEventListener("orientationchange",function(){$scope.$emit("otLayout")}),$scope.$on("$destroy",function(){$scope.session&&$scope.connected&&($scope.session.disconnect(),$scope.connected=!1),$scope.session=null,disconnect()})}).controller("whiteboardController",function($scope,OTSession,$stateParams,$window){var apiKey=$stateParams.apiKey,sessionId=$stateParams.sessionId,token=$stateParams.token;$scope.patientId=$stateParams.patientId,$scope.calId=$stateParams.calId,$scope.mouseMove=!1,$scope.connected=!1,$scope.session=null,$scope.session&&$scope.session.disconnect(),OTSession.init(apiKey,sessionId,token,function(err,session){$scope.session=session;var connectDisconnect=function(connected){$scope.$apply(function(){$scope.connected=connected})};(session.is&&session.is("connected")||session.connected)&&connectDisconnect(!0),$scope.session.on("sessionConnected",connectDisconnect.bind($scope.session,!0)),$scope.session.on("sessionDisconnected",connectDisconnect.bind($scope.session,!1));var whiteboardUpdated=function(){$scope.$apply(function(){$scope.mouseMove=!0})};$scope.$on("otWhiteboardUpdate",whiteboardUpdated)});var mouseMoveTimeout,mouseMoved=function(event){$scope.mouseMove||$scope.$apply(function(){$scope.mouseMove=!0}),mouseMoveTimeout&&clearTimeout(mouseMoveTimeout),mouseMoveTimeout=setTimeout(function(){$scope.$apply(function(){$scope.mouseMove=!1})},5e3)};$window.addEventListener("mousemove",mouseMoved),$window.addEventListener("touchstart",mouseMoved)}).directive("medicalDevice",function(OTSession,$window,Restangular,socket){return{restrict:"E",scope:{callSession:"="},templateUrl:"modules/makeCall/views/medicalDevice.html",link:function(scope,element,attrs){scope.onlineDevice=null,scope.onlineData=null,scope.session=null,scope.session=scope.callSession?scope.callSession:OTSession.session;var signalError=function(err){err?TB.error(err):console.log("success")};socket.on("getMeasureData",function(rs){if(rs.info){var data=angular.copy(rs.info);delete data.deviceType,delete data.rawData,scope.$apply(function(){scope.onlineDevice=rs.info.deviceType,scope.onlineData=data});var signal={type:"bluetooth_data",data:rs.info};scope.session.signal(signal,signalError)}}),scope.session&&scope.session.on({"signal:bluetooth_data":function(event){if(event.from.connectionId!==scope.session.connection.connectionId){var info=event.data;if(info){var rs=angular.copy(info);delete rs.deviceType,delete rs.rawData,scope.$apply(function(){scope.onlineDevice=info.deviceType,scope.onlineData=rs})}scope.$emit("medicalDeviceUpdate")}}})}}}),angular.module("app.calling").controller("callControllerApiRTC",function($timeout,$scope,$document,$modalStack,$interval,$location,$rootScope,$state,$modal,$cookieStore,toastr,$window,socket,UserService,$stateParams){function userMediaErrorHandler(e){console.log("userMediaErrorHandler"),console.log(e)}function hangupHandler(e){console.log("hangupHandler"),console.log(e.detail.reason)}function incomingCallHandler(e){console.log("========Incoming Call========="),audio.pause(),$scope.isAccept=!0}function callAttemptHandler(e){alert("Id :"+e.detail.callerId+"is trying to reach you")}function errorHandler(e){console.log("errorHandler"),console.log(e)}function sessionReadyHandler(e){apiRTC.addEventListener("incomingCall",incomingCallHandler),apiRTC.addEventListener("userMediaError",userMediaErrorHandler),apiRTC.addEventListener("callAttempt",callAttemptHandler),apiRTC.addEventListener("hangup",hangupHandler),apiRTC.addEventListener("error",errorHandler);var webRTCClient=apiCC.session.createWebRTCClient({localVideo:"myLocalVideo",minilocalVideo:"myMiniVideo",remoteVideo:"myRemoteVideo",status:"status"});$scope.isCaller?(audio.loop=!0,audio.play(),socket.emit("sendMessage",$scope.userInfo.id,$stateParams.callUser,{type:"call",apiKey:$stateParams.apiKey,clientId:webRTCClient.webRTCClient.clientId})):$stateParams.clientId&&webRTCClient.call($stateParams.clientId)}function disconnect(){socket.emit("sendMessage",$scope.userInfo.id,$stateParams.callUser,{type:"cancel"}),window.close(),null==$scope.newwin&&$scope.newwin.closed||$scope.newwin.close()}{var audio=new Audio("theme/assets/phone_calling.mp3");$stateParams.apiKey}$scope.newwin=null,$scope.userInfo=null,$scope.callUserInfo=null,$scope.patientId=null!=$stateParams.patientId||void 0!=$stateParams.patientId?$stateParams.patientId:null,$scope.isCaller=1==$stateParams.isCaller||"1"==$stateParams.isCaller?!0:!1,$scope.isAccept=!1,UserService.getUserInfo($stateParams.callUser).then(function(data){data.img="theme/assets/icon.png",$scope.callUserInfo=data}),$scope.userInfo=$cookieStore.get("userInfo"),apiRTC.init({apiKey:$stateParams.apiKey,appId:"RedimedApp",onReady:sessionReadyHandler}),socket.removeListener("messageReceived"),socket.on("messageReceived",function(fromId,fromUser,message){"ignore"===message.type&&(audio.pause(),toastr.info(fromUser+" Has Ignored The Call!"),disconnect()),"cancel"===message.type&&(audio.pause(),toastr.info(fromUser+" Has Left The Call!"),disconnect())})});